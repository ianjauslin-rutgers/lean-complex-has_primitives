import Mathlib.Analysis.Complex.Basic
import Mathlib.Analysis.Calculus.Deriv.Basic
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic
import Mathlib.AlgebraicTopology.FundamentalGroupoid.SimplyConnected

set_option autoImplicit false

-- From V. Beffara https://github.com/vbeffara/RMT4
def hasPrimitives (U : Set ‚ÑÇ) : Prop :=
  ‚àÄ f : ‚ÑÇ ‚Üí ‚ÑÇ, DifferentiableOn ‚ÑÇ f U ‚Üí ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, DifferentiableOn ‚ÑÇ g U ‚àß Set.EqOn (deriv g) f U

-- main theorem: holomorphic functions on simply connected open sets have primitives
theorem hasPrimitivesOfSimplyConnected (U : Set ‚ÑÇ) (hSc : SimplyConnectedSpace U) (hO : IsOpen U) :
   hasPrimitives U := by sorry

namespace Real

-- A useful function: goes from z‚ÇÅ to z‚ÇÇ with a speed that vanishes at the endpoints
-- Having a vanishing speed at the endpoints allows paths that are differentiable by parts to be
--  parametrized in a differentiable way
noncomputable def straightSeg (t‚ÇÅ t‚ÇÇ : ‚Ñù ) (ht : t‚ÇÅ < t‚ÇÇ) (z‚ÇÅ z‚ÇÇ : ‚ÑÇ) : ‚Ñù ‚Üí ‚ÑÇ :=
  fun t => z‚ÇÅ * (1 - cos (t * œÄ / (t‚ÇÇ - t‚ÇÅ))) + z‚ÇÇ * cos (t * œÄ / (t‚ÇÇ - t‚ÇÅ))

#exit
theorem contDiffStraightSeg (t‚ÇÅ t‚ÇÇ : ‚Ñù ) (ht : t‚ÇÅ < t‚ÇÇ) (z‚ÇÅ z‚ÇÇ : ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ ) : ‚àÄ·∂† i in ùìù i‚ÇÄ, ContinuousOn (F i) (Œ≥ '' Icc t‚ÇÅ t‚ÇÇ) := by
  refine straightSeg t‚ÇÅ t‚ÇÇ ht z‚ÇÅ z‚ÇÇ
  sorry
