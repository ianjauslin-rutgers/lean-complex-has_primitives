import Mathlib.AlgebraicTopology.FundamentalGroupoid.SimplyConnected
import Mathlib.Analysis.Calculus.Deriv.Basic
import Mathlib.Analysis.Complex.Basic
import Mathlib.Analysis.Complex.UnitDisc.Basic
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic
import Mathlib.MeasureTheory.Integral.IntervalIntegral

import Mathlib.Tactic.LibrarySearch

set_option autoImplicit false

-- From V. Beffara https://github.com/vbeffara/RMT4
def hasPrimitives (U : Set ‚ÑÇ) : Prop :=
  ‚àÄ f : ‚ÑÇ ‚Üí ‚ÑÇ, DifferentiableOn ‚ÑÇ f U ‚Üí ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, DifferentiableOn ‚ÑÇ g U ‚àß Set.EqOn (deriv g) f U

-- From V. Beffara https://github.com/vbeffara/RMT4
-- integral along a curve
noncomputable def curvint (t‚ÇÅ t‚ÇÇ : ‚Ñù) (f : ‚ÑÇ ‚Üí ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) : ‚ÑÇ :=
  ‚à´ t in t‚ÇÅ..t‚ÇÇ, deriv Œ≥ t ‚Ä¢ f (Œ≥ t)

namespace Real
-- A useful function: goes from z‚ÇÅ to z‚ÇÇ with a speed that vanishes at the endpoints
-- Having a vanishing speed at the endpoints allows paths that are differentiable by parts to be
--  parametrized in a differentiable way
noncomputable def straightSeg (t‚ÇÅ t‚ÇÇ : ‚Ñù ) (z‚ÇÅ z‚ÇÇ : ‚ÑÇ) : ‚Ñù ‚Üí ‚ÑÇ :=
  fun t => z‚ÇÅ * (1 - cos (t * œÄ / (t‚ÇÇ - t‚ÇÅ))) + z‚ÇÇ * cos (t * œÄ / (t‚ÇÇ - t‚ÇÅ))

-- straight line integral between two complex points
noncomputable def linint (z‚ÇÅ z‚ÇÇ : ‚ÑÇ) (f : ‚ÑÇ ‚Üí ‚ÑÇ) : ‚ÑÇ :=
  curvint 0 1 f (straightSeg 0 1 z‚ÇÅ z‚ÇÇ)

lemma diffOfIntegrals (z‚ÇÄ z‚ÇÅ z‚ÇÇ : Complex.UnitDisc) (f : ‚ÑÇ ‚Üí ‚ÑÇ)
    (hf : DifferentiableOn ‚ÑÇ f (Metric.ball 0 1)) :
    linint z‚ÇÄ z‚ÇÅ f - linint z‚ÇÄ z‚ÇÇ f = linint z‚ÇÇ z‚ÇÅ f := by
  sorry

lemma derivOfLinint (z‚ÇÄ : ‚ÑÇ) (f: ‚ÑÇ ‚Üí ‚ÑÇ) (hf: Continuous f) (l: Filter ‚ÑÇ):
    ‚àÄ·∂†h in l, (linint z‚ÇÄ (z‚ÇÄ+h) f)/h = f z‚ÇÄ := by
  sorry

-- To prove the main theorem, we first prove it on a disk
theorem hasPrimitivesOfDisk : hasPrimitives (Metric.ball 0 1) := by
  intros f hf_diff
  use fun z ‚Ü¶ linint 0 z f
  constructor
  ¬∑ sorry

  ¬∑ intro z  hz
    let z_ondisc := (Complex.UnitDisc.mk z ?_)
    have : ‚àÄ h : Complex.UnitDisc, Complex.abs (z_ondisc+h) < 1 ‚Üí linint 0 (z+h) f - linint 0 z f = linint z (z+h) f:= by
      intros h ondisc
      let zph_ondisc := (Complex.UnitDisc.mk (z+h) ?_)
      have := diffOfIntegrals 0 zph_ondisc z_ondisc f hf_diff
      rw [Complex.UnitDisc.coe_mk] at this
      rw [Complex.UnitDisc.coe_mk] at this
      exact this

      sorry
      sorry

    sorry

  

-- main theorem: holomorphic functions on simply connected open sets have primitives
theorem hasPrimitivesOfSimplyConnected (U : Set ‚ÑÇ) (hSc : SimplyConnectedSpace U) (hO : IsOpen U) :
    hasPrimitives U := by
  sorry


#exit
theorem contDiffStraightSeg (t‚ÇÅ t‚ÇÇ : ‚Ñù ) (ht : t‚ÇÅ < t‚ÇÇ) (z‚ÇÅ z‚ÇÇ : ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ ) : ‚àÄ·∂† i in ùìù i‚ÇÄ, ContinuousOn (F i) (Œ≥ '' Icc t‚ÇÅ t‚ÇÇ) := by
  refine straightSeg t‚ÇÅ t‚ÇÇ ht z‚ÇÅ z‚ÇÇ
  sorry
