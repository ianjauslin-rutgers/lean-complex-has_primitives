import Mathlib.AlgebraicTopology.FundamentalGroupoid.SimplyConnected
import Mathlib.Analysis.Calculus.Deriv.Basic
import Mathlib.Analysis.Complex.Basic
import Mathlib.Analysis.Convex.Basic
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic
import Mathlib.MeasureTheory.Integral.IntervalIntegral
import Mathlib.Analysis.Complex.CauchyIntegral

-- Is this needed??
-- import Mathlib.Tactic.LibrarySearch

open Complex Topology

-- Is this needed??
--set_option autoImplicit false
set_option autoImplicit true

open scoped Interval


theorem rectangle_inside_disc (c : ‚ÑÇ) {r : ‚Ñù} (hr : 0 < r) (z w : ‚ÑÇ) (hz : z ‚àà Metric.ball c r)
    (hw : w ‚àà Metric.ball c r)  (hzw : (z.re + w.im * I) ‚àà Metric.ball c r)
    (hwz : (w.re + z.im * I) ‚àà Metric.ball c r) :
    ([[z.re, w.re]] √ó‚ÑÇ [[z.im, w.im]]) ‚äÜ Metric.ball c r := by
  intro x hx
  sorry

-- From V. Beffara https://github.com/vbeffara/RMT4
def HasPrimitives (U : Set ‚ÑÇ) : Prop :=
  ‚àÄ f : ‚ÑÇ ‚Üí ‚ÑÇ, DifferentiableOn ‚ÑÇ f U ‚Üí ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, DifferentiableOn ‚ÑÇ g U ‚àß Set.EqOn (deriv g) f U

/-- The wedge integral from z to w of a function f -/
noncomputable def WedgeInt (z w : ‚ÑÇ) (f : ‚ÑÇ ‚Üí ‚ÑÇ) : ‚ÑÇ :=
  (‚à´ x : ‚Ñù in z.re..w.re, f (x + z.im * I)) + I ‚Ä¢ (‚à´ y : ‚Ñù in z.im..w.im, f (re w + y * I))

def VanishesOnRectanglesInDisc (c : ‚ÑÇ) (r : ‚Ñù) (f : ‚ÑÇ ‚Üí ‚ÑÇ) : Prop :=
    ‚àÄ z w, z ‚àà Metric.ball c r ‚Üí w ‚àà Metric.ball c r ‚Üí (z.re + w.im * I) ‚àà Metric.ball c r ‚Üí
    (w.re + z.im * I) ‚àà Metric.ball c r ‚Üí
    (‚à´ x : ‚Ñù in z.re..w.re, f (x + z.im * I)) - (‚à´ x : ‚Ñù in z.re..w.re, f (x + w.im * I))
     + I ‚Ä¢ (‚à´ y : ‚Ñù in z.im..w.im, f (w.re + y * I)) - I ‚Ä¢ ‚à´ y : ‚Ñù in z.im..w.im, f (z.re + y * I) = 0


-- /-- For small h, the rectangle stays inside the disc -/
-- theorem rectangle_in_disc {c : ‚ÑÇ} {r : ‚Ñù} (hr : 0 < r) {z : ‚ÑÇ} (hz : z ‚àà Metric.ball c r) :
--     ‚àÄ·∂† h in ùìù 0, z + h.re ‚àà Metric.ball c r ‚àß z + h.im * I ‚àà Metric.ball c r ‚àß z + h ‚àà Metric.ball c r := by
--   have : 0 < (r - dist z c) / 2 := by sorry
--   filter_upwards [Metric.ball_mem_nhds 0 this]
--   sorry

-- -- Needed? Maybe not?
-- theorem Complex.mem_ball_iff_normSq (c z : ‚ÑÇ) (r : ‚Ñù) (hr : 0 ‚â§ r) :
--     z ‚àà Metric.ball c r ‚Üî normSq (z-c) < r^2 := by
--   rw [mem_ball_iff_norm, normSq_eq_abs, norm_eq_abs, sq_lt_sq, abs_abs, abs_eq_self.mpr hr]


/-- diff of wedges -/
lemma VanishesOnRectanglesInDisc.diff_of_wedges {c : ‚ÑÇ} {r : ‚Ñù} (hr : 0 < r) {z : ‚ÑÇ}
    (hz : z ‚àà Metric.ball c r) {f : ‚ÑÇ ‚Üí ‚ÑÇ} (f_cont : ContinuousOn f (Metric.ball c r))
    (hf : VanishesOnRectanglesInDisc c r f) :
    ‚àÄ·∂† h in ùìù 0,
      WedgeInt c (z+h) f - WedgeInt c z f = WedgeInt z (z+h) f := by
  --simp only [Metric.mem_ball] at hz
  have : 0 < (r - dist z c) / 2 := by sorry
  filter_upwards [Metric.ball_mem_nhds 0 this]
  intro h hh
--  simp only [Metric.mem_ball, dist_zero_right, norm_eq_abs] at hh
  simp only [WedgeInt] --, add_re, ofReal_add, add_im, smul_eq_mul]
  set intI := ‚à´ x : ‚Ñù in c.re..(z + h).re, f (x + c.im * I)
  set intII := I ‚Ä¢ ‚à´ y : ‚Ñù in c.im..(z + h).im, f ((z+h).re + y * I)
  set intIII := ‚à´ x : ‚Ñù in c.re..z.re, f (x + c.im * I)
  set intIV := I ‚Ä¢ ‚à´ y : ‚Ñù in c.im..z.im, f (z.re + y * I)
  set intV := ‚à´ x : ‚Ñù in z.re..(z + h).re, f (x + z.im * I)
  set intVI := I ‚Ä¢ ‚à´ y : ‚Ñù in z.im..(z + h).im, f ((z+h).re + y * I)
  let intVII := ‚à´ x : ‚Ñù in z.re..(z+h).re, f (x + c.im * I)
  let intVIII := I ‚Ä¢ ‚à´ y : ‚Ñù in c.im..z.im, f ((z+h).re + y * I)
  have integrHoriz : ‚àÄ a‚ÇÅ a‚ÇÇ b : ‚Ñù, a‚ÇÅ + b * I ‚àà Metric.ball c r ‚Üí a‚ÇÇ + b * I ‚àà Metric.ball c r ‚Üí
    IntervalIntegrable (fun x => f (x + b * I)) MeasureTheory.volume a‚ÇÅ a‚ÇÇ
  ¬∑ intro a‚ÇÅ a‚ÇÇ b ha‚ÇÅ ha‚ÇÇ
    apply ContinuousOn.intervalIntegrable
    convert @ContinuousOn.comp ‚Ñù ‚ÑÇ ‚ÑÇ _ _ _ f (fun x => (x : ‚ÑÇ) + b * I) (Set.uIcc a‚ÇÅ a‚ÇÇ)
      ((fun (x : ‚Ñù) => (x : ‚ÑÇ) + b * I) '' (Set.uIcc a‚ÇÅ a‚ÇÇ)) ?_ ?_ ?_
    ¬∑ apply f_cont.mono
      sorry -- need to prove that this is a subset of the domain
    ¬∑ apply Continuous.continuousOn
      exact Continuous.comp (continuous_add_right _) continuous_ofReal
    ¬∑ exact Set.mapsTo_image _ _
  have integrVert : ‚àÄ a b‚ÇÅ b‚ÇÇ : ‚Ñù, a + b‚ÇÅ * I ‚àà Metric.ball c r ‚Üí a + b‚ÇÇ * I ‚àà Metric.ball c r ‚Üí
    IntervalIntegrable (fun y => f (a + y * I)) MeasureTheory.volume b‚ÇÅ b‚ÇÇ
  ¬∑ intro a b‚ÇÅ b‚ÇÇ ha hb
    apply ContinuousOn.intervalIntegrable
    convert @ContinuousOn.comp ‚Ñù ‚ÑÇ ‚ÑÇ _ _ _ f (fun y => (a : ‚ÑÇ) + y * I) (Set.uIcc b‚ÇÅ b‚ÇÇ)
      ((fun (y : ‚Ñù) => (a : ‚ÑÇ) + y * I) '' (Set.uIcc b‚ÇÅ b‚ÇÇ)) ?_ ?_ ?_
    ¬∑ apply f_cont.mono
      sorry -- need to prove that this is a subset of the domain
    ¬∑ apply Continuous.continuousOn
      refine Continuous.comp (continuous_add_left _) ?_
      refine Continuous.comp (continuous_mul_right _) continuous_ofReal
    ¬∑ exact Set.mapsTo_image _ _
  have intIdecomp : intI = intIII + intVII  := by
    rw [intervalIntegral.integral_add_adjacent_intervals] <;> apply integrHoriz
    ¬∑ simp only [re_add_im, Metric.mem_ball, dist_self, hr]
    ¬∑ sorry -- point in ball
    ¬∑ sorry -- point in ball
    ¬∑ sorry -- point in ball
  have intIIdecomp : intII = intVIII + intVI := by
    rw [‚Üê smul_add, intervalIntegral.integral_add_adjacent_intervals] <;> apply integrVert
    ¬∑ sorry
    ¬∑ sorry
    ¬∑ sorry
    ¬∑ sorry
  have rectZero : intVIII = - intVII + intV + intIV := by
    rw [‚Üê sub_eq_zero]
    have : intVII - intV + intVIII - intIV = 0 := by
      convert hf (z.re + c.im * I) ((z+h).re + z.im * I) ?_ ?_ ?_ ?_ using 2
      ¬∑ congr! 1
        ¬∑ congr! 1
          ¬∑ simp
          ¬∑ simp
        ¬∑ simp
      ¬∑ simp
      ¬∑ sorry -- point in ball
      ¬∑ sorry -- point in ball
      ¬∑ simp only [Metric.mem_ball] at hz
        simp [hz]
      ¬∑ simp only [add_re, ofReal_add, ofReal_re, mul_re, I_re, mul_zero, ofReal_im, I_im, mul_one,
          sub_self, add_zero, add_im, mul_im, zero_add]
        sorry
    rw [‚Üê this]
    ring
  rw [intIdecomp]
  rw [intIIdecomp]
  rw [rectZero]
  ring



    -- ¬∑ apply ContinuousOn.intervalIntegrable
    --   convert @ContinuousOn.comp ‚Ñù ‚ÑÇ ‚ÑÇ _ _ _ f (fun x => (x : ‚ÑÇ) + c.im * I) (Set.uIcc c.re z.re)
    --     ((fun (x : ‚Ñù) => (x : ‚ÑÇ) + c.im * I) '' (Set.uIcc c.re z.re)) ?_ ?_ ?_
    --   ¬∑ convert @DifferentiableOn.continuousOn ‚ÑÇ _ ‚ÑÇ _ _ ‚ÑÇ _ _ f _ _
    --     apply hf.mono
    --     intro x hx
    --     simp only [ge_iff_le, Set.mem_image] at hx
    --     obtain ‚ü®x‚ÇÅ, hx‚ÇÅ, hx‚ÇÅ'‚ü© := hx
    --     rw [Set.mem_uIcc] at hx‚ÇÅ
    --     rw [Complex.mem_ball_iff_normSq hr] at hz
    --     rw [Complex.mem_ball_iff_normSq hr]
    --     apply lt_of_le_of_lt ?_ hz
    --     rw [‚Üê hx‚ÇÅ']
    --     rw [Complex.normSq_apply]
    --     rw [Complex.normSq_apply]
    --     simp only [sub_re, add_re, ofReal_re, mul_re, I_re, mul_zero, ofReal_im, I_im, mul_one,
    --       sub_self, add_zero, sub_im, add_im, mul_im, zero_add]
    --     cases hx‚ÇÅ <;>calc
    --     _ ‚â§ (z.re - c.re) * (z.re - c.re) := by nlinarith
    --     _ ‚â§ _ := by
    --       simp only [le_add_iff_nonneg_right, gt_iff_lt, sub_pos]
    --       exact mul_self_nonneg (z.im - c.im)
    --   ¬∑ apply Continuous.continuousOn
    --     exact Continuous.comp (continuous_add_right _) continuous_ofReal
    --   ¬∑ exact Set.mapsTo_image _ _
    -- sorry--integrable






lemma wedgeInt_of_const (z w c : ‚ÑÇ) :
    WedgeInt z w (fun x => c) = c*(w-z) := by
  simp only [WedgeInt, intervalIntegral.integral_const, real_smul, ofReal_sub, smul_eq_mul]
  ext <;>
  simp only [add_re, mul_re, sub_re, ofReal_re, sub_im, ofReal_im, sub_self, zero_mul,
sub_zero, I_re, I_im, mul_im, add_zero, one_mul, zero_sub, add_im,
zero_add]
   <;> ring

example (hyp: ‚àÄ·∂† h in (ùìù 0), h=2) : ‚àÄ·∂† h in (ùìù 0), h^2=4 := by
  filter_upwards [hyp]
  intro a hw
  rw [hw]
  ring



lemma deriv_of_linint {f: ‚Ñù ‚Üí ‚ÑÇ} {a: ‚Ñù} {U : Set ‚Ñù} (hU: IsOpen U) (hUa: a‚àà U) (hf: ContinuousOn f U) :
    Asymptotics.IsLittleO (ùìù 0) (fun h ‚Ü¶ ((‚à´ x in a..a+h, f x) - h*(f a))) (fun h ‚Ü¶ h) := by
  sorry

lemma deriv_of_horv_0 {f:‚Ñù ‚Üí‚ÑÇ} {U: Set ‚Ñù} {hU0: 0 ‚àà U} {hU: IsOpen U}
    (hfC: ContinuousOn f U) (hfM: StronglyMeasurableAtFilter f (nhds 0))
    {c : ‚Ñù} (hc: 0<c):
    ‚àÄ·∂† (h : ‚Ñù) in ùìù 0, ‚Äñ(‚à´ (x : ‚Ñù) in (0:‚Ñù)..h, f x) - h * f 0‚Äñ ‚â§ c/3 * ‚Äñh‚Äñ := by

  have integrable : IntervalIntegrable (fun x:‚Ñù => f x-f 0) Real.measureSpace.volume 0 0 := by
    simp
  have continuous_on : ContinuousOn (fun x => f x - f 0) U := by
    apply ContinuousOn.sub hfC (continuousOn_const)
  have continuous : ContinuousAt (fun x => f x - f 0) 0 := by
    apply ContinuousOn.continuousAt continuous_on ?_
    rw [mem_nhds_iff]
    use U
  have measurable : StronglyMeasurableAtFilter (fun x => f x - f 0) (nhds 0) := by
    apply ContinuousOn.stronglyMeasurableAtFilter hU continuous_on 0
    exact hU0

  have diff := intervalIntegral.integral_hasDerivAt_right integrable measurable continuous
  rw [hasDerivAt_iff_isLittleO] at diff
  simp only [intervalIntegral.integral_same, sub_zero, re_add_im, sub_self, real_smul, ofReal_sub, mul_zero] at diff
  rw [Asymptotics.isLittleO_iff] at diff
  have : 0 < c/3 := div_pos hc zero_lt_three
  have := diff this

  -- condition on h
  rw [Filter.eventually_iff] at this
  filter_upwards [this]
  intro h h_diff

  simp only [ofReal_zero, add_zero, re_add_im, sub_self, mul_zero, sub_zero, norm_eq_abs, Real.norm_eq_abs] at h_diff

  -- write f as f-f(z‚ÇÄ)+f(z‚ÇÄ)
  calc
    _ = ‚Äñ(‚à´ x in (0:‚Ñù)..h, ((f x-f 0) + f 0)) - h*f 0‚Äñ := by ring_nf
    _ = ‚Äñ(‚à´ x in (0:‚Ñù)..h, (f x-f 0)) + (‚à´ x in (0:‚Ñù)..h, f 0) - h* f 0‚Äñ := ?_
    _ = ‚Äñ(‚à´ x in (0:‚Ñù)..h, (f x-f 0)) + h‚Ä¢f 0 - h* f 0‚Äñ := by
      rw [intervalIntegral.integral_const (f 0)]
      simp
    _ = ‚Äñ(‚à´ x in (0:‚Ñù)..h, (f x-f 0))‚Äñ := by simp
    _ = Complex.abs ((‚à´ (x : ‚Ñù) in (0:‚Ñù)..h, f x - f 0)) := by simp
    _ ‚â§ _ := h_diff
  congr

  rw [intervalIntegral.integral_add ?_ ?_]
  ¬∑ sorry
  ¬∑ sorry



lemma deriv_of_horv (a:‚Ñù) {f:‚Ñù ‚Üí‚ÑÇ} {U: Set ‚Ñù} {hUa: a ‚àà U} {hU: IsOpen U}
    (hfC: ContinuousOn f U) (hfM: StronglyMeasurableAtFilter f (nhds a))
    (c : ‚Ñù) (hc: 0<c):
    ‚àÄ·∂† (h : ‚Ñù) in ùìù 0, ‚Äñ(‚à´ (x : ‚Ñù) in a..a+h, f x) - h * f a‚Äñ ‚â§ c/3 * ‚Äñh‚Äñ := by
  let U' := {x:‚Ñù | x+a ‚àà U}
  have continuous : ContinuousOn (fun x => f (a+x)) U' := by
    sorry
  have measurable : StronglyMeasurableAtFilter (fun x => f (a+x)) (nhds 0) := by
    sorry
  have := @deriv_of_horv_0 _ _ ?_ ?_ continuous measurable _ hc
  simp_rw [intervalIntegral.integral_comp_add_left (fun x:‚Ñù => f x) a] at this
  simp only [add_zero, sub_self, mul_zero, sub_zero] at this
  exact this

  simp only [Set.mem_setOf_eq, zero_add]
  exact hUa

  sorry


lemma deriv_of_wedgeInt {f: ‚ÑÇ ‚Üí ‚ÑÇ} {U : Set ‚ÑÇ} {hU: IsOpen U} (hf: ContinuousOn f U)
    {z‚ÇÄ : ‚ÑÇ} (hz‚ÇÄ : z‚ÇÄ‚ààU) :
    Asymptotics.IsLittleO (ùìù 0) (fun h:‚ÑÇ ‚Ü¶ ((WedgeInt z‚ÇÄ (z‚ÇÄ+h) f) - h*(f z‚ÇÄ))) (fun h ‚Ü¶ h) := by

  simp [WedgeInt]
  -- turn littleO into bigO
  rw [Asymptotics.isLittleO_iff]
  intro c hc

  -- get ball around z‚ÇÄ
  obtain ‚ü®Œµ,hŒµ,B‚ü© := (Metric.isOpen_iff.mp hU) z‚ÇÄ hz‚ÇÄ

  -- restate goal, splitting real and imaginary parts of h
  have : ‚àÄ·∂† (hre : ‚Ñù) in ùìù 0, ‚àÄ·∂†(him : ‚Ñù) in ùìù 0,
  ‚Äñ((‚à´ (x : ‚Ñù) in z‚ÇÄ.re..z‚ÇÄ.re + hre, f (‚Üëx + ‚Üëz‚ÇÄ.im * I)) +
          I * ‚à´ (y : ‚Ñù) in z‚ÇÄ.im..z‚ÇÄ.im + him, f (‚Üëz‚ÇÄ.re + ‚Üëhre + ‚Üëy * I)) -
        (hre+him*I) * f z‚ÇÄ‚Äñ ‚â§
    c * ‚Äñhre+him*I‚Äñ := by

    -- apply fundamental theorem of calculus to horizontal part
    have continuous_h : ContinuousOn (fun x:‚Ñù => f (x + z‚ÇÄ.im*I)) z‚ÇÄ.re := by
      sorry
    have stronglymeasurable_h : StronglyMeasurableAtFilter (fun x:‚Ñù => f (x + z‚ÇÄ.im*I)) (nhds z‚ÇÄ.re) := by
      sorry
    have horizontal := deriv_of_horv z‚ÇÄ.re  continuous_h stronglymeasurable_h c hc

    -- condition on h.re
    rw [Filter.eventually_iff] at horizontal
    filter_upwards [Metric.ball_mem_nhds 0 hŒµ,horizontal]
    intro hre hre_eps hre_diff

    -- apply fundamental theorem of calculus to vertical part
    have continuous_v : ContinuousAt (fun y:‚Ñù => f (z‚ÇÄ.re + hre + y*I)) z‚ÇÄ.im := by
      sorry
    have stronglymeasurable_v : StronglyMeasurableAtFilter (fun y:‚Ñù => f (z‚ÇÄ.re + hre + y*I)) (nhds z‚ÇÄ.im) := by
      sorry
    have vertical := deriv_of_horv z‚ÇÄ.im  continuous_v stronglymeasurable_v c hc

    -- condition on h.im
    rw [Filter.eventually_iff] at vertical
    filter_upwards [Metric.ball_mem_nhds 0 hŒµ,vertical]
    intro him him_eps him_diff

    have : ‚Äñ((‚à´ (x : ‚Ñù) in z‚ÇÄ.re..z‚ÇÄ.re + hre, f (‚Üëx + ‚Üëz‚ÇÄ.im * I)) +
        I * ‚à´ (y : ‚Ñù) in z‚ÇÄ.im..z‚ÇÄ.im + him, f (‚Üëz‚ÇÄ.re + ‚Üëhre + ‚Üëy * I)) -
        (‚Üëhre + ‚Üëhim * I) * f z‚ÇÄ‚Äñ ‚â§
        ‚Äñ(‚à´ (x : ‚Ñù) in z‚ÇÄ.re..z‚ÇÄ.re + hre, f (‚Üëx + ‚Üëz‚ÇÄ.im * I)) - hre * f z‚ÇÄ‚Äñ +
        ‚Äñ(‚à´ (y : ‚Ñù) in z‚ÇÄ.im..z‚ÇÄ.im + him, f (‚Üëz‚ÇÄ.re + ‚Üëhre + ‚Üëy * I) - ‚Üëhim * f (z‚ÇÄ+hre))‚Äñ
        + ‚ÄñI* (f (z‚ÇÄ+hre) - f z‚ÇÄ)‚Äñ := by
      -- norm_add_le
      sorry

    suffices hsp : ‚Äñ(‚à´ (x : ‚Ñù) in z‚ÇÄ.re..z‚ÇÄ.re + hre, f (‚Üëx + ‚Üëz‚ÇÄ.im * I)) - hre * f z‚ÇÄ‚Äñ +
        ‚Äñ(‚à´ (y : ‚Ñù) in z‚ÇÄ.im..z‚ÇÄ.im + him, f (‚Üëz‚ÇÄ.re + ‚Üëhre + ‚Üëy * I) - ‚Üëhim * f (z‚ÇÄ+hre))‚Äñ
        + ‚ÄñI* (f (z‚ÇÄ+hre) - f z‚ÇÄ)‚Äñ ‚â§ c*‚Äñhre + him*I‚Äñ

    ¬∑ exact le_trans this hsp
    ¬∑ sorry


--  -- write f as f-f(z‚ÇÄ)+f(z‚ÇÄ)
--  have : ‚àÄ h:‚ÑÇ, ‚à´ x in z‚ÇÄ.re..z‚ÇÄ.re + h.re, f (x + z‚ÇÄ.im * I) = ‚à´ x in z‚ÇÄ.re..z‚ÇÄ.re + h.re, ((f (x + z‚ÇÄ.im * I)-f z‚ÇÄ) + f z‚ÇÄ) := by
--    intro h
--    ring_nf
--  have : ‚àÄ h:‚ÑÇ, ‚à´ x in z‚ÇÄ.re..z‚ÇÄ.re + h.re, f (x + z‚ÇÄ.im * I) = (‚à´ x in z‚ÇÄ.re..z‚ÇÄ.re + h.re, (f (x + z‚ÇÄ.im * I)-f z‚ÇÄ)) + h.re*f z‚ÇÄ := by
--    intro h
--    sorry
--  conv =>
--    lhs
--    intro h
--    rw [this]
--
--  -- write f as f-f(z‚ÇÄ)+f(z‚ÇÄ)
--  have : ‚àÄ h:‚ÑÇ, ‚à´ y in z‚ÇÄ.im..z‚ÇÄ.im + h.im, f (z‚ÇÄ.re + h.re + y * I) = ‚à´ y in z‚ÇÄ.im..z‚ÇÄ.im + h.im, (f (z‚ÇÄ.re + h.re + y * I) -f z‚ÇÄ) + f z‚ÇÄ := by
--    intro h
--    ring_nf
--  have : ‚àÄ h:‚ÑÇ, ‚à´ y in z‚ÇÄ.im..z‚ÇÄ.im + h.im, f (z‚ÇÄ.re + h.re + y * I) = (‚à´ y in z‚ÇÄ.im..z‚ÇÄ.im + h.im, f (z‚ÇÄ.re + h.re + y * I) -f z‚ÇÄ) + h.im * f z‚ÇÄ := by
--    intro h
--    sorry
--  conv =>
--    lhs
--    intro h
--    rw [this]
--
--  -- why doesn't this work??
----  conv =>
----    lhs
----    intro h
----    pattern h * f z‚ÇÄ
----    rw [(Complex.re_add_im h).symm]
----  ring_nf
--  have : ‚àÄ h : ‚ÑÇ, h*f z‚ÇÄ = (h.re+h.im*I)*f z‚ÇÄ := by
--    intro h
--    simp
--  conv =>
--    lhs
--    intro h
--    rw [this h]
--
--  -- why doesn't ring do this on its own?!?!?!?!
--  have : ‚àÄ h:‚ÑÇ, (‚à´ (x : ‚Ñù) in z‚ÇÄ.re..z‚ÇÄ.re + h.re, f (‚Üëx + ‚Üëz‚ÇÄ.im * I) - f z‚ÇÄ) + ‚Üëh.re * f z‚ÇÄ +
--        I * ((‚à´ (y : ‚Ñù) in z‚ÇÄ.im..z‚ÇÄ.im + h.im, f (‚Üëz‚ÇÄ.re + ‚Üëh.re + ‚Üëy * I) - f z‚ÇÄ) + ‚Üëh.im * f z‚ÇÄ) -
--      (‚Üëh.re + ‚Üëh.im * I) * f z‚ÇÄ = (‚à´ (x : ‚Ñù) in z‚ÇÄ.re..z‚ÇÄ.re + h.re, f (‚Üëx + ‚Üëz‚ÇÄ.im * I) - f z‚ÇÄ) +
--        I * ((‚à´ (y : ‚Ñù) in z‚ÇÄ.im..z‚ÇÄ.im + h.im, f (‚Üëz‚ÇÄ.re + ‚Üëh.re + ‚Üëy * I) - f z‚ÇÄ)) := by
--    intro h
--    ring
--  conv =>
--    lhs
--    intro h
--    rw [this h]
--
--  -- apply fundamental theorem of calculus to each part of the integral
--  have continuous_h : ContinuousAt (fun x:‚Ñù => f (x + z‚ÇÄ.im*I)-f z‚ÇÄ) z‚ÇÄ.re := by
--    sorry
--  have integrable_h : IntervalIntegrable (fun x:‚Ñù => f (x + z‚ÇÄ.im*I)-f z‚ÇÄ) Real.measureSpace.volume z‚ÇÄ.re z‚ÇÄ.re := by
--    sorry
--  have stronglymeasureable_h : StronglyMeasurableAtFilter (fun x:‚Ñù => f (x + z‚ÇÄ.im*I)-f z‚ÇÄ) (nhds z‚ÇÄ.re) := by
--    sorry
--
--  have diff_h := intervalIntegral.integral_hasDerivAt_right integrable_h stronglymeasureable_h continuous_h
--  rw [hasDerivAt_iff_isLittleO] at diff_h
--  simp only [intervalIntegral.integral_same, sub_zero, re_add_im, sub_self, real_smul, ofReal_sub, mul_zero] at diff_h




  -- apply fundamental theorem of calculus to each part of the integral
  have horint : Asymptotics.IsLittleO (ùìù 0) (fun h:‚ÑÇ ‚Ü¶ ‚à´ x in z‚ÇÄ.re..z‚ÇÄ.re + h.re, (f (x + z‚ÇÄ.im * I) - f z‚ÇÄ)) (fun h => h) := by
    have integrable : IntervalIntegrable (fun x:‚Ñù => f (x + z‚ÇÄ.im*I)-f z‚ÇÄ) z‚ÇÄ.re z‚ÇÄ.re+h.re
  have verint : Asymptotics.IsLittleO (ùìù 0) (fun h:‚ÑÇ ‚Ü¶ ‚à´ y in z‚ÇÄ.im..z‚ÇÄ.im + h.im, (f (z‚ÇÄ.re + h.re + y * I) - f z‚ÇÄ)) (fun h => h) := by
    sorry
  have verint' : Asymptotics.IsLittleO (ùìù 0) (fun h:‚ÑÇ ‚Ü¶ I*‚à´ y in z‚ÇÄ.im..z‚ÇÄ.im + h.im, (f (z‚ÇÄ.re + h.re + y * I) - f z‚ÇÄ)) (fun h => h) :=
    Asymptotics.IsLittleO.const_mul_left verint I

  exact Asymptotics.IsLittleO.add horint verint'

  --have : Asymptotics.IsLittleO (ùìù 0) (fun h ‚Ü¶ f (z‚ÇÄ+h) - f z‚ÇÄ) (fun h ‚Ü¶ (1:‚ÑÇ)) := by
  --  have := ContinuousOn.continuousAt hf (IsOpen.mem_nhds hU hz‚ÇÄ)
  --  have f_tendsto := ContinuousAt.tendsto this
  --  simp only [Asymptotics.isLittleO_one_iff]
  --  rw [tendsto_sub_nhds_zero_iff]

  --  -- shift the origin of the filter
  --  -- this can probably be done better
  --  let g := fun h ‚Ü¶ z‚ÇÄ+h
  --  have g_tendsto : Filter.Tendsto g (ùìù 0) (ùìù z‚ÇÄ) := by
  --    dsimp [g]
  --    rw [tendsto_sub_nhds_zero_iff.symm]
  --    simp only [add_sub_cancel']
  --    rw [Filter.tendsto_def]
  --    intros s hs
  --    simp only [Set.preimage_id']
  --    exact hs
  --  have := Filter.Tendsto.comp f_tendsto g_tendsto
  --  rw [Function.comp] at this
  --  exact this

  --dsimp [WedgeInt]







-- -- trivial case: empty set
-- theorem HasPrimitivesOfEmpty : HasPrimitives ‚àÖ := by
--   dsimp [HasPrimitives]
--   simp only [Set.eqOn_empty, and_true]
--   dsimp [DifferentiableOn]
--   dsimp [DifferentiableWithinAt]
--   dsimp [HasFDerivWithinAt]
--   dsimp [HasFDerivAtFilter]
--   simp only [Set.mem_empty_iff_false, nhdsWithin_empty, map_sub, IsEmpty.forall_iff, forall_const, exists_const,
--   forall_true_left]


/-- Moreira's theorem -/
theorem moreiras_theorem {c : ‚ÑÇ} {r : ‚Ñù} (hr : 0 < r) {f : ‚ÑÇ ‚Üí ‚ÑÇ}
    (hf : ContinuousOn f (Metric.ball c r))
    (hf‚ÇÇ : VanishesOnRectanglesInDisc c r f) :
    ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, DifferentiableOn ‚ÑÇ g (Metric.ball c r) ‚àß Set.EqOn (deriv g) f (Metric.ball c r) := by
  sorry

theorem vanishesOnRectangles_of_holomorphic {c : ‚ÑÇ} {r : ‚Ñù} (hr : 0 < r) {f : ‚ÑÇ ‚Üí ‚ÑÇ}
    (hf : DifferentiableOn ‚ÑÇ f (Metric.ball c r)) :
    VanishesOnRectanglesInDisc c r f := by
  intro z w hz hw hz' hw'
  convert integral_boundary_rect_eq_zero_of_differentiable_on_off_countable f z w ‚àÖ ?_ ?_ ?_ using 4
  ¬∑ simp
  ¬∑ apply (hf.mono _).continuousOn
    intro x hx
    sorry -- rectangle is inside disc
  ¬∑ intro x hx
    apply hf.differentiableAt
    rw [mem_nhds_iff]
    refine ‚ü®Metric.ball c r, Eq.subset rfl, Metric.isOpen_ball, ?_‚ü©
    sorry -- rectangle is inside disc




-- To prove the main theorem, we first prove it on a disc
theorem hasPrimitives_of_disc (c : ‚ÑÇ) {r : ‚Ñù} (hr : 0 < r) : HasPrimitives (Metric.ball c r) :=
    fun _ hf ‚Ü¶ moreiras_theorem hr hf.continuousOn (vanishesOnRectangles_of_holomorphic hr hf)

  -- by_cases hne : U = ‚àÖ
  -- ¬∑ convert HasPrimitivesOfEmpty

  -- ¬∑ intros f hf_diff
  --   -- get z‚ÇÄ
  --   have : Nonempty U := Set.nonempty_iff_ne_empty'.mpr hne
  --   obtain ‚ü®z‚ÇÄ,hz‚ÇÄ‚ü© := Set.exists_mem_of_nonempty U
  --   use fun z ‚Ü¶ linint z‚ÇÄ z f
  --   constructor
  --   ¬∑ sorry

  --   ¬∑ intro z  hz
  --     have : ‚àÄ h : ‚ÑÇ, z+h‚àà U ‚Üí linint z‚ÇÄ (z+h) f - linint z‚ÇÄ z f = linint z (z+h) f:= by
  --       intros h hinU
  --       refine diffOfIntegrals U hU z‚ÇÄ (z+h) z ?_ hinU hz f hf_diff

  --       exact Subtype.mem z‚ÇÄ
  --     sorry


-- main theorem: holomorphic functions on simply connected open sets have primitives
theorem HasPrimitivesOfSimplyConnected (U : Set ‚ÑÇ) (hSc : SimplyConnectedSpace U) (hO : IsOpen U) :
    HasPrimitives U := by
  sorry



-- theorem contDiffStraightSeg (t‚ÇÅ t‚ÇÇ : ‚Ñù ) (ht : t‚ÇÅ < t‚ÇÇ) (z‚ÇÅ z‚ÇÇ : ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ ) : ‚àÄ·∂† i in ùìù i‚ÇÄ, ContinuousOn (F i) (Œ≥ '' Icc t‚ÇÅ t‚ÇÇ) := by
--   refine straightSeg t‚ÇÅ t‚ÇÇ ht z‚ÇÅ z‚ÇÇ
--   sorry
