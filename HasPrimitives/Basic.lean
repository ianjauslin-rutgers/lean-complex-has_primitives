import Mathlib.Analysis.Complex.CauchyIntegral

/-%%
This project aims to formalize a proof that holomorphic functions on discs have primitives.
%%-/

open Complex Topology Set

set_option autoImplicit true

open scoped Interval

namespace Set

-- TO DO: move to `Mathlib.Data.Intervals.UnorderedInterval` (Yael add API?)
def uIoo {Œ± : Type*} [LinearOrder Œ±]  : Œ± ‚Üí Œ± ‚Üí Set Œ± := fun a b => Ioo (a ‚äì b) (a ‚äî b)

-- TO DO: move to `Mathlib.Data.Intervals.UnorderedInterval` (Yael add API?)
theorem uIoo_comm {Œ± : Type*} [LinearOrder Œ±] (a : Œ±) (b : Œ±) :
    uIoo a b = uIoo b a := by simp [uIoo, inf_comm, sup_comm]

theorem uIoo_subset_uIcc {Œ± : Type*} [LinearOrder Œ±] (a : Œ±) (b : Œ±) :
    uIoo a b ‚äÜ uIcc a b := by simp [uIoo, uIcc, Ioo_subset_Icc_self]

end Set

namespace Complex

/-- This lemma shows the equality between the convext hull of a complex product set and
  the complex product of convex hulls. -/
lemma convexHull_reProdIm (s t : Set ‚Ñù) :
    convexHull ‚Ñù (s √ó‚ÑÇ t) = convexHull ‚Ñù s √ó‚ÑÇ convexHull ‚Ñù t :=
  calc
    convexHull ‚Ñù (equivRealProdLm ‚Åª¬π' (s √óÀ¢ t)) = equivRealProdLm ‚Åª¬π' (convexHull ‚Ñù (s √óÀ¢ t)) := by
      simpa only [‚Üê LinearEquiv.image_symm_eq_preimage]
        using equivRealProdLm.symm.toLinearMap.convexHull_image (s √óÀ¢ t)
    _ = convexHull ‚Ñù s √ó‚ÑÇ convexHull ‚Ñù t := by rw [convexHull_prod]; rfl

/-- The preimage under `equivRealProd` of `s √óÀ¢ t` is `s √ó‚ÑÇ t`. -/
lemma preimage_equivRealProd_prod (s t : Set ‚Ñù) : equivRealProd ‚Åª¬π' (s √óÀ¢ t) = s √ó‚ÑÇ t := rfl

/-- The inequality `s √ó t ‚äÜ s‚ÇÅ √ó t‚ÇÅ` holds in `‚ÑÇ` iff it holds in `‚Ñù √ó ‚Ñù`. -/
theorem reProdIm_subset_iff {s s‚ÇÅ t t‚ÇÅ : Set ‚Ñù} : s √ó‚ÑÇ t ‚äÜ s‚ÇÅ √ó‚ÑÇ t‚ÇÅ ‚Üî s √óÀ¢ t ‚äÜ s‚ÇÅ √óÀ¢ t‚ÇÅ := by
  rw [‚Üê @preimage_equivRealProd_prod s t, ‚Üê @preimage_equivRealProd_prod s‚ÇÅ t‚ÇÅ]
  exact Equiv.preimage_subset equivRealProd _ _


/-- If `s ‚äÜ s‚ÇÅ ‚äÜ ‚Ñù` and `t ‚äÜ t‚ÇÅ ‚äÜ ‚Ñù`, then `s √ó t ‚äÜ s‚ÇÅ √ó t‚ÇÅ` in `‚ÑÇ`. -/
theorem reProdIm_subset_iff' {s s‚ÇÅ t t‚ÇÅ : Set ‚Ñù} :
    s √ó‚ÑÇ t ‚äÜ s‚ÇÅ √ó‚ÑÇ t‚ÇÅ ‚Üî s ‚äÜ s‚ÇÅ ‚àß t ‚äÜ t‚ÇÅ ‚à® s = ‚àÖ ‚à® t = ‚àÖ := by
  convert prod_subset_prod_iff
  exact reProdIm_subset_iff

/-- The axis-parallel complex rectangle with opposite corners `z` and `w` is complex product
  of two intervals, which is also the convex hull of the four corners. -/
lemma segment_reProdIm_segment_eq_convexHull (z w : ‚ÑÇ) :
    [[z.re, w.re]] √ó‚ÑÇ [[z.im, w.im]] = convexHull ‚Ñù {z, z.re + w.im * I, w.re + z.im * I, w} := by
  simp_rw [‚Üê segment_eq_uIcc, ‚Üê convexHull_pair, ‚Üê convexHull_reProdIm,
    ‚Üê preimage_equivRealProd_prod, insert_prod, singleton_prod, image_pair,
    insert_union, ‚Üê insert_eq, preimage_equiv_eq_image_symm, image_insert_eq, image_singleton,
    equivRealProd_symm_apply, re_add_im]


/-%%
\begin{definition}[Rectangle]
  \label{Rectangle}
  \lean{Rectangle}\leanok
    Given points $z$ and $w$ in $\mathbb C$, a ``Rectangle'' means an axis-parallel rectangle with
    corners $z$ and $w$.
\end{definition}
%%-/
/-- A `Rectangle` is an axis-parallel rectangle with corners `z` and `w`. -/
def Rectangle (z w : ‚ÑÇ) : Set ‚ÑÇ := [[z.re, w.re]] √ó‚ÑÇ [[z.im, w.im]]

/-- If the four corners of a rectangle are contained in a convex set `U`, then the whole
  rectangle is. -/
theorem Convex.rectangle {U : Set ‚ÑÇ} (U_convex : Convex ‚Ñù U) {z w : ‚ÑÇ} (hz : z ‚àà U)
    (hw : w ‚àà U) (hzw : (z.re + w.im * I) ‚àà U) (hwz : (w.re + z.im * I) ‚àà U) :
    Rectangle z w ‚äÜ U := by
  rw [Rectangle, segment_reProdIm_segment_eq_convexHull]
  convert convexHull_min ?_ (U_convex)
  refine insert_subset hz (insert_subset hzw (insert_subset hwz ?_))
  exact singleton_subset_iff.mpr hw

/-- If `z` is in a ball centered at `c`, then `z.re + c.im * I` is in the ball. -/
lemma cornerRectangle_in_disc {c : ‚ÑÇ} {r : ‚Ñù} {z : ‚ÑÇ} (hz : z ‚àà Metric.ball c r) :
    z.re + c.im * I ‚àà Metric.ball c r := by
  simp only [Metric.mem_ball] at hz ‚ä¢
  rw [dist_of_im_eq] <;> simp only [add_re, I_re, mul_zero, I_im, zero_add, add_im,
    add_zero, sub_self, mul_re, mul_one, ofReal_im, mul_im, ofReal_re]
  apply lt_of_le_of_lt ?_ hz
  rw [dist_eq_re_im, Real.dist_eq]
  apply Real.le_sqrt_of_sq_le
  simp only [_root_.sq_abs, le_add_iff_nonneg_right, ge_iff_le, sub_nonneg]
  exact sq_nonneg _

/-- As `w ‚Üí z`, `w.re - z.re` is big-O of `w - z`. -/
theorem re_isBigO {z : ‚ÑÇ} :
  (fun (w : ‚ÑÇ) => w.re - z.re) =O[ùìù z] fun w => w - z := by
  rw [Asymptotics.isBigO_iff]
  use 1
  filter_upwards
  intro w
  simp only [Real.norm_eq_abs, Complex.norm_eq_abs, one_mul]
  rw [‚Üê Complex.sub_re]
  exact Complex.abs_re_le_abs (w - z)

/-- As `w ‚Üí z`, `w.im - z.im` is big-O of `w - z`. -/
theorem im_isBigO {z : ‚ÑÇ} :
  (fun (w : ‚ÑÇ) => w.im - z.im) =O[ùìù z] fun w => w - z := by
  rw [Asymptotics.isBigO_iff]
  use 1
  filter_upwards
  intro w
  simp only [Real.norm_eq_abs, Complex.norm_eq_abs, one_mul]
  rw [‚Üê Complex.sub_im]
  exact Complex.abs_im_le_abs (w - z)

/-- A real segment `[a‚ÇÅ, a‚ÇÇ]` translated by `b * I` is the complex line segment. -/
theorem horizontalSegment_eq (a‚ÇÅ a‚ÇÇ b : ‚Ñù) :
    (fun x => ‚Üëx + ‚Üëb * I) '' [[a‚ÇÅ, a‚ÇÇ]] = [[a‚ÇÅ, a‚ÇÇ]] √ó‚ÑÇ {b} := by
  rw [‚Üê preimage_equivRealProd_prod]
  ext x
  constructor
  ¬∑ intro hx
    obtain ‚ü®x‚ÇÅ, hx‚ÇÅ, hx‚ÇÅ'‚ü© := hx
    simp [‚Üê hx‚ÇÅ', mem_preimage, mem_prod, hx‚ÇÅ]
  ¬∑ intro hx
    obtain ‚ü®x‚ÇÅ, hx‚ÇÅ, hx‚ÇÅ', hx‚ÇÅ''‚ü© := hx
    refine ‚ü®x.re, x‚ÇÅ, by simp‚ü©

/-- A vertical segment `[b‚ÇÅ, b‚ÇÇ]` translated by `a` is the complex line segment. -/
theorem verticalSegment_eq (a b‚ÇÅ b‚ÇÇ : ‚Ñù) :
    (fun y => ‚Üëa + ‚Üëy * I) '' [[b‚ÇÅ, b‚ÇÇ]] = {a} √ó‚ÑÇ [[b‚ÇÅ, b‚ÇÇ]] := by
  rw [‚Üê preimage_equivRealProd_prod]
  ext x
  constructor
  ¬∑ intro hx
    obtain ‚ü®x‚ÇÅ, hx‚ÇÅ, hx‚ÇÅ'‚ü© := hx
    simp [‚Üê hx‚ÇÅ', mem_preimage, mem_prod, hx‚ÇÅ]
  ¬∑ intro hx
    simp only [equivRealProd_apply, singleton_prod, mem_image, Prod.mk.injEq,
      exists_eq_right_right, mem_preimage] at hx
    obtain ‚ü®x‚ÇÅ, hx‚ÇÅ, hx‚ÇÅ', hx‚ÇÅ''‚ü© := hx
    refine ‚ü®x.im, x‚ÇÅ, by simp‚ü©

end Complex


/-%%
\begin{definition}[Has Primitives]
  \label{HasPrimitives}
  \lean{HasPrimitives}\leanok
  Given a set $U\subset\mathbb C$, for any differentiable $f:U\to\mathbb C$, there exists a differentiable $g:U\to\mathbb C$ such that $g'=f$ on $U$.
\end{definition}
%%-/
/-- A set `U` `HasPrimitives` if, every holomorphic function on `U` has a primitive -/
def HasPrimitives (U : Set ‚ÑÇ) : Prop :=
  ‚àÄ f : ‚ÑÇ ‚Üí ‚ÑÇ, DifferentiableOn ‚ÑÇ f U ‚Üí ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, ‚àÄ z ‚àà U, HasDerivAt g (f z) z

/-- The wedge integral from `z` to `w` of a function `f` -/
noncomputable def WedgeInt (z w : ‚ÑÇ) (f : ‚ÑÇ ‚Üí ‚ÑÇ) : ‚ÑÇ :=
  (‚à´ x : ‚Ñù in z.re..w.re, f (x + z.im * I)) + I ‚Ä¢ (‚à´ y : ‚Ñù in z.im..w.im, f (re w + y * I))

noncomputable def RectangleIntegral (f : ‚ÑÇ ‚Üí ‚ÑÇ) (z w : ‚ÑÇ) : ‚ÑÇ :=
    (‚à´ x : ‚Ñù in z.re..w.re, f (x + z.im * I)) - (‚à´ x : ‚Ñù in z.re..w.re, f (x + w.im * I))
     + I ‚Ä¢ (‚à´ y : ‚Ñù in z.im..w.im, f (w.re + y * I)) - I ‚Ä¢ ‚à´ y : ‚Ñù in z.im..w.im, f (z.re + y * I)

/-- A function `f` `VanishesOnRectanglesInDisc` if, for any rectangle contained in a disc,
  the integral of `f` over the rectangle is zero. -/
def VanishesOnRectanglesInDisc (c : ‚ÑÇ) (r : ‚Ñù) (f : ‚ÑÇ ‚Üí ‚ÑÇ) : Prop :=
    ‚àÄ z w, z ‚àà Metric.ball c r ‚Üí w ‚àà Metric.ball c r ‚Üí (z.re + w.im * I) ‚àà Metric.ball c r ‚Üí
    (w.re + z.im * I) ‚àà Metric.ball c r ‚Üí RectangleIntegral f z w = 0

/-- If a function `f` `VanishesOnRectanglesInDisc` of center `c`, then, for all `w` in a
  neighborhood of `z`, the wedge integral from `c` to `w` minus the wedge integral from `c` to `z`
  is equal to the wedge integral from `z` to `w`. -/
lemma VanishesOnRectanglesInDisc.diff_of_wedges {c : ‚ÑÇ} {r : ‚Ñù} {z : ‚ÑÇ}
    (hz : z ‚àà Metric.ball c r) {f : ‚ÑÇ ‚Üí ‚ÑÇ} (f_cont : ContinuousOn f (Metric.ball c r))
    (hf : VanishesOnRectanglesInDisc c r f) :
    ‚àÄ·∂† (w : ‚ÑÇ) in ùìù z,
      WedgeInt c w f - WedgeInt c z f = WedgeInt z w f := by
--%% \begin{proof}
  have hr : 0 < r := Metric.pos_of_mem_ball hz
  let r‚ÇÅ := r - dist z c
  have r‚ÇÅ_pos : 0 < r‚ÇÅ := by simp only [Metric.mem_ball, gt_iff_lt] at hz ‚ä¢; linarith
  have z_ball : Metric.ball z r‚ÇÅ ‚äÜ Metric.ball c r
  ¬∑ intro w hw
    simp only [Metric.mem_ball] at hw hz ‚ä¢
    have := dist_triangle w z c
    nlinarith
  filter_upwards [Metric.ball_mem_nhds z r‚ÇÅ_pos]
  intro w w_in_z_ball
  have hzPlusH : w ‚àà Metric.ball c r := mem_of_subset_of_mem z_ball w_in_z_ball
  simp only [WedgeInt]
  set intI := ‚à´ x : ‚Ñù in c.re..(w).re, f (x + c.im * I)
  set intII := I ‚Ä¢ ‚à´ y : ‚Ñù in c.im..w.im, f (w.re + y * I)
  set intIII := ‚à´ x : ‚Ñù in c.re..z.re, f (x + c.im * I)
  set intIV := I ‚Ä¢ ‚à´ y : ‚Ñù in c.im..z.im, f (z.re + y * I)
  set intV := ‚à´ x : ‚Ñù in z.re..w.re, f (x + z.im * I)
  set intVI := I ‚Ä¢ ‚à´ y : ‚Ñù in z.im..w.im, f (w.re + y * I)
  let intVII := ‚à´ x : ‚Ñù in z.re..w.re, f (x + c.im * I)
  let intVIII := I ‚Ä¢ ‚à´ y : ‚Ñù in c.im..z.im, f (w.re + y * I)
  have integrableHoriz : ‚àÄ a‚ÇÅ a‚ÇÇ b : ‚Ñù, a‚ÇÅ + b * I ‚àà Metric.ball c r ‚Üí a‚ÇÇ + b * I ‚àà Metric.ball c r ‚Üí
    IntervalIntegrable (fun x => f (x + b * I)) MeasureTheory.volume a‚ÇÅ a‚ÇÇ
  ¬∑ intro a‚ÇÅ a‚ÇÇ b ha‚ÇÅ ha‚ÇÇ
    apply ContinuousOn.intervalIntegrable
    convert ContinuousOn.comp (g := f) (f := fun (x : ‚Ñù) => (x : ‚ÑÇ) + b * I) (s := uIcc a‚ÇÅ a‚ÇÇ)
      (t := (fun (x : ‚Ñù) => (x : ‚ÑÇ) + b * I) '' (uIcc a‚ÇÅ a‚ÇÇ)) ?_ ?_ (mapsTo_image _ _)
    ¬∑ apply f_cont.mono
      convert Convex.rectangle (convex_ball c r) ha‚ÇÅ ha‚ÇÇ ?_ ?_ using 1 <;>
        simp only [add_re, ofReal_re, mul_re, I_re, mul_zero, ofReal_im, I_im, mul_one, sub_self,
          add_zero, add_im, mul_im, zero_add, ha‚ÇÅ, ha‚ÇÇ, Rectangle]
      simp only [le_refl, uIcc_of_le, Icc_self, horizontalSegment_eq a‚ÇÅ a‚ÇÇ b]
    ¬∑ exact Continuous.continuousOn (Continuous.comp (continuous_add_right _) continuous_ofReal)
  have integrableVert : ‚àÄ a b‚ÇÅ b‚ÇÇ : ‚Ñù, a + b‚ÇÅ * I ‚àà Metric.ball c r ‚Üí a + b‚ÇÇ * I ‚àà Metric.ball c r
    ‚Üí IntervalIntegrable (fun y => f (a + y * I)) MeasureTheory.volume b‚ÇÅ b‚ÇÇ
  ¬∑ intro a b‚ÇÅ b‚ÇÇ hb‚ÇÅ hb‚ÇÇ
    apply ContinuousOn.intervalIntegrable
    convert ContinuousOn.comp (g := f) (f := fun (y : ‚Ñù) => (a : ‚ÑÇ) + y * I) (s := uIcc b‚ÇÅ b‚ÇÇ)
      (t := (fun (y : ‚Ñù) => (a : ‚ÑÇ) + y * I) '' (uIcc b‚ÇÅ b‚ÇÇ)) ?_ ?_ (mapsTo_image _ _)
    ¬∑ apply f_cont.mono
      convert Convex.rectangle (convex_ball c r) hb‚ÇÅ hb‚ÇÇ ?_ ?_ using 1 <;>
        simp only [add_re, ofReal_re, mul_re, I_re, mul_zero, ofReal_im, I_im, mul_one, sub_self,
        add_zero, add_im, mul_im, zero_add, hb‚ÇÅ, hb‚ÇÇ, Rectangle]
      simp only [ le_refl, uIcc_of_le, Icc_self, verticalSegment_eq a b‚ÇÅ b‚ÇÇ]
    ¬∑ apply Continuous.continuousOn
      exact ((continuous_add_left _).comp (continuous_mul_right _)).comp continuous_ofReal
  have intIdecomp : intI = intIII + intVII
  ¬∑ rw [intervalIntegral.integral_add_adjacent_intervals] <;> apply integrableHoriz
    ¬∑ simp only [re_add_im, Metric.mem_ball, dist_self, hr]
    ¬∑ exact cornerRectangle_in_disc hz
    ¬∑ exact cornerRectangle_in_disc hz
    ¬∑ exact cornerRectangle_in_disc hzPlusH
  have intIIdecomp : intII = intVIII + intVI
  ¬∑ rw [‚Üê smul_add, intervalIntegral.integral_add_adjacent_intervals] <;> apply integrableVert
    ¬∑ exact cornerRectangle_in_disc hzPlusH
    ¬∑ apply mem_of_subset_of_mem z_ball (cornerRectangle_in_disc w_in_z_ball)
    ¬∑ apply mem_of_subset_of_mem z_ball (cornerRectangle_in_disc w_in_z_ball)
    ¬∑ convert hzPlusH using 1; ext <;> simp
  have rectZero : intVIII = - intVII + intV + intIV
  ¬∑ rw [‚Üê sub_eq_zero]
    have : intVII - intV + intVIII - intIV = 0 := by
      have wzInBall : w.re + ‚Üëz.im * I ‚àà Metric.ball c r :=
        by exact mem_of_subset_of_mem z_ball (cornerRectangle_in_disc w_in_z_ball)
      have wcInBall : w.re + c.im * I ‚àà Metric.ball c r := by
        exact cornerRectangle_in_disc hzPlusH
      convert hf (z.re + c.im * I) (w.re + z.im * I) (cornerRectangle_in_disc hz) wzInBall
          (by simpa using hz) (by simpa using wcInBall) using 1
      rw [RectangleIntegral]
      congr <;> simp
    rw [‚Üê this]
    ring
  rw [intIdecomp, intIIdecomp, rectZero]
  ring
--%% \end{proof}


theorem deriv_of_wedgeInt_re' {c : ‚ÑÇ} {r : ‚Ñù} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : ContinuousOn f (Metric.ball c r))
  {z : ‚ÑÇ} (hz : z ‚àà Metric.ball c r) :
  (fun (x : ‚Ñù) ‚Ü¶ (‚à´ t in z.re..x, f (t + z.im * I)) - (x - z.re) * f z)
    =o[ùìù z.re] fun x ‚Ü¶ x - z.re := by
  let r‚ÇÅ := r - dist z c
  have r‚ÇÅ_pos : 0 < r‚ÇÅ := by simp only [Metric.mem_ball, gt_iff_lt] at hz ‚ä¢; linarith
  let s : Set ‚Ñù := Ioo (z.re - r‚ÇÅ) (z.re + r‚ÇÅ)
  have zRe_mem_s : z.re ‚àà s := by simp [Metric.mem_ball.mp hz]
  have s_open : IsOpen s := isOpen_Ioo
  have s_ball : s √ó‚ÑÇ {z.im} ‚äÜ Metric.ball c r
  ¬∑ intro x hx
    simp only [Metric.mem_ball, dist_eq_norm, norm_eq_abs, hz] at hz ‚ä¢
    apply lt_trans ?_ hz
    rw [abs_apply, abs_apply]
    sorry
  have f_contOn : ContinuousOn (fun (x : ‚Ñù) => f (x + z.im * I)) s
  ¬∑ apply (hf.comp ((continuous_add_right _).comp continuous_ofReal).continuousOn)
    intro w hw
    change w + z.im * I ‚àà Metric.ball c r
    apply s_ball
    rw [mem_reProdIm]
    simp only [add_re, ofReal_re, mul_re, I_re, mul_zero, ofReal_im, I_im, mul_one, sub_self,
      add_zero, gt_iff_lt, not_lt, ge_iff_le, mem_Ioo, add_im, mul_im, zero_add, mem_singleton_iff,
      and_true]
    apply hw
  have int1 : IntervalIntegrable (fun (x : ‚Ñù) => f (x + z.im * I)) MeasureTheory.volume z.re z.re
  ¬∑ apply ContinuousOn.intervalIntegrable
    apply f_contOn.mono
    simp [Metric.mem_ball.mp hz]
  have int2 : StronglyMeasurableAtFilter (fun (x : ‚Ñù) => f (x + z.im * I)) (ùìù z.re)
  ¬∑ apply ContinuousOn.stronglyMeasurableAtFilter s_open f_contOn
    exact zRe_mem_s
  have int3 : ContinuousAt (fun (x : ‚Ñù) => f (x + z.im * I)) z.re :=
    s_open.continuousOn_iff.mp f_contOn zRe_mem_s
  have := @intervalIntegral.integral_hasDerivAt_right (f := fun (x : ‚Ñù) ‚Ü¶ f (x + z.im * I)) (a := z.re) (b := z.re) _ _ _ int1 int2 int3
  dsimp [HasDerivAt, HasDerivAtFilter, HasFDerivAtFilter] at this
  simp only [intervalIntegral.integral_same, sub_zero, re_add_im, map_sub] at this
  convert this using 3
  ring_nf
  congr

theorem deriv_of_wedgeInt_re {c : ‚ÑÇ} {r : ‚Ñù} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : ContinuousOn f (Metric.ball c r))
  {z : ‚ÑÇ} (hz : z ‚àà Metric.ball c r) :
  (fun w ‚Ü¶ (‚à´ x in z.re..w.re, f (x + z.im * I)) - (w - z).re * f z)
    =o[ùìù z] fun w ‚Ü¶ w - z := by
  have zReTendsTo : Filter.Tendsto (fun (w : ‚ÑÇ) ‚Ü¶ w.re) (ùìù z) (ùìù z.re) :=
    by apply Continuous.tendsto Complex.continuous_re
  have := (deriv_of_wedgeInt_re' hf hz).comp_tendsto zReTendsTo
  have := this.trans_isBigO re_isBigO
  convert this using 2
  congr
  simp


theorem deriv_of_wedgeInt_im' {c : ‚ÑÇ} {r : ‚Ñù} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : ContinuousOn f (Metric.ball c r))
  {z : ‚ÑÇ} (hz : z ‚àà Metric.ball c r) :
  (fun (y : ‚Ñù) ‚Ü¶ (‚à´ t in z.im..y, f (z.re + t * I)) - (y - z.im) * f z)
    =o[ùìù z.im] fun y ‚Ü¶ y - z.im := by
  let r‚ÇÅ := r - dist z c
  have r‚ÇÅ_pos : 0 < r‚ÇÅ := by simp only [Metric.mem_ball, gt_iff_lt] at hz ‚ä¢; linarith
  let s : Set ‚Ñù := Ioo (z.im - r‚ÇÅ) (z.im + r‚ÇÅ)
  have zIm_mem_s : z.im ‚àà s := by simp [Metric.mem_ball.mp hz]
  have s_open : IsOpen s := isOpen_Ioo
  have s_ball : {z.re} √ó‚ÑÇ s ‚äÜ Metric.ball c r
  ¬∑ intro x hx
    simp only [Metric.mem_ball, dist_eq_norm, norm_eq_abs, hz] at hz ‚ä¢
    apply lt_trans ?_ hz
    rw [abs_apply, abs_apply]
    sorry
  have f_contOn : ContinuousOn (fun (y : ‚Ñù) => f (z.re + y * I)) s
  ¬∑ apply hf.comp (((continuous_add_left _).comp (continuous_mul_right _)).comp continuous_ofReal).continuousOn
    intro w hw
    simp only [Function.comp_apply, Metric.mem_ball]
    apply s_ball
    rw [mem_reProdIm]
    simp only [add_re, ofReal_re, mul_re, I_re, mul_zero, ofReal_im, I_im, mul_one, sub_self,
      add_zero, mem_singleton_iff, add_im, mul_im, zero_add, gt_iff_lt, not_lt, ge_iff_le, mem_Ioo,
      true_and]
    apply hw
  have int1 : IntervalIntegrable (fun y => f (z.re + y * I)) MeasureTheory.volume z.im z.im
  ¬∑ apply ContinuousOn.intervalIntegrable
    apply f_contOn.mono
    simp [Metric.mem_ball.mp hz]
  have int2 : StronglyMeasurableAtFilter (fun (y : ‚Ñù) => f (z.re + y * I)) (ùìù z.im)
  ¬∑ apply ContinuousOn.stronglyMeasurableAtFilter s_open f_contOn
    exact zIm_mem_s
  have int3 : ContinuousAt (fun (y : ‚Ñù) => f (z.re + y * I)) z.im :=
    s_open.continuousOn_iff.mp f_contOn zIm_mem_s
  have := @intervalIntegral.integral_hasDerivAt_right (f := fun (y : ‚Ñù) ‚Ü¶ f (z.re + y * I)) (a := z.im) (b := z.im) _ _ _ int1 int2 int3
  dsimp [HasDerivAt, HasDerivAtFilter, HasFDerivAtFilter] at this
  simp only [intervalIntegral.integral_same, sub_zero, re_add_im, map_sub] at this
  convert this using 3
  ring_nf
  congr

theorem deriv_of_wedgeInt_im'' {c : ‚ÑÇ} {r : ‚Ñù} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : ContinuousOn f (Metric.ball c r))
  {z : ‚ÑÇ} (hz : z ‚àà Metric.ball c r) :
  (fun w ‚Ü¶ (‚à´ y in z.im..w.im, f (z.re + y * I)) - (w - z).im * f z)
    =o[ùìù z] fun w ‚Ü¶ w - z := by
  have zImTendsTo : Filter.Tendsto (fun (w : ‚ÑÇ) ‚Ü¶ w.im) (ùìù z) (ùìù z.im) :=
    by apply Continuous.tendsto Complex.continuous_im
  have := (deriv_of_wedgeInt_im' hf hz).comp_tendsto zImTendsTo
  have := this.trans_isBigO im_isBigO
  convert this using 2
  congr
  simp

theorem deriv_of_wedgeInt_im''' {c : ‚ÑÇ} {r : ‚Ñù} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : ContinuousOn f (Metric.ball c r))
  {z : ‚ÑÇ} (hz : z ‚àà Metric.ball c r) :
  (fun w ‚Ü¶ (‚à´ y in z.im..w.im, f (w.re + y * I)) - (‚à´ y in z.im..w.im, f (z.re + y * I)))
    =o[ùìù z] fun w ‚Ü¶ w - z := by

  sorry

theorem deriv_of_wedgeInt_im {c : ‚ÑÇ} {r : ‚Ñù} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : ContinuousOn f (Metric.ball c r))
  {z : ‚ÑÇ} (hz : z ‚àà Metric.ball c r) :
  (fun w ‚Ü¶ (‚à´ y in z.im..w.im, f (w.re + y * I)) - (w - z).im * f z)
    =o[ùìù z] fun w ‚Ü¶ w - z :=
  calc
    _ = (fun w ‚Ü¶ (‚à´ y in z.im..w.im, f (w.re + y * I)) - (‚à´ y in z.im..w.im, f (z.re + y * I)))
        + (fun w ‚Ü¶ (‚à´ y in z.im..w.im, f (z.re + y * I)) - (w - z).im * f z) :=
          by exact (sub_add_sub_cancel _ _ _).symm
    _ =o[ùìù z] fun w => w - z := by
      convert (deriv_of_wedgeInt_im''' hf hz).add (deriv_of_wedgeInt_im'' hf hz) using 1

theorem deriv_of_wedgeInt {c : ‚ÑÇ} {r : ‚Ñù} {f : ‚ÑÇ ‚Üí ‚ÑÇ}
    (f_cont : ContinuousOn f (Metric.ball c r)) (hf : VanishesOnRectanglesInDisc c r f)
    {z : ‚ÑÇ} (hz : z ‚àà Metric.ball c r) :
    HasDerivAt (fun w => WedgeInt c w f) (f z) z := by
  have hr : 0 < r := Metric.pos_of_mem_ball hz
  dsimp [HasDerivAt, HasDerivAtFilter, HasFDerivAtFilter]
  calc
    _ =·∂†[ùìù z] (fun w ‚Ü¶ WedgeInt z w f - (w - z) * f z) := ?_
    _ = (fun w ‚Ü¶ (‚à´ x in z.re..w.re, f (‚Üëx + ‚Üëz.im * I)) - (w - z).re * f z)
        + I ‚Ä¢ (fun w ‚Ü¶ (‚à´ y in z.im..w.im, f (w.re + y * I)) - (w - z).im * f z) := ?_
    _ =o[ùìù z] fun w ‚Ü¶ w - z :=
      (deriv_of_wedgeInt_re f_cont hz).add ((deriv_of_wedgeInt_im f_cont hz).const_smul_left I)
  ¬∑ filter_upwards [VanishesOnRectanglesInDisc.diff_of_wedges hz f_cont hf]
    exact fun a ha ‚Ü¶ by rw [ha]
  ext1 w
  simp only [WedgeInt, smul_eq_mul, sub_re, ofReal_sub, sub_im, Pi.add_apply, Pi.smul_apply]
  set intI := ‚à´ (x : ‚Ñù) in z.re..w.re, f (x + z.im * I)
  set intII := ‚à´ (y : ‚Ñù) in z.im..w.im, f (w.re + y * I)
  calc
    _ = intI + I * intII - ((w - z).re + (w - z).im * I) * f z := by congr; rw [re_add_im]
    _ = intI + I * intII - ((w.re - z.re) + (w.im - z.im) * I) * f z := by simp
    _ = intI - (w.re - z.re) * f z + I * (intII - (w.im - z.im) * f z) := by ring

/-- Moreira's theorem
/-%%
This is Moreira's theorem.
\begin {theorem}[Moreira's theorem]
\label {moreira}
\lean {moreira}\leanok
Let $f$ be a continuous function on a disc $D(c,r)$, and suppose that $f$ vanishes on rectangles in $D(c,r)$. Then $f$ has a primitive on $D(c,r)$.
\end {theorem}
%%-/
-/
theorem moreiras_theorem {c : ‚ÑÇ} {r : ‚Ñù} {f : ‚ÑÇ ‚Üí ‚ÑÇ}
    (hf : ContinuousOn f (Metric.ball c r))
    (hf‚ÇÇ : VanishesOnRectanglesInDisc c r f) :
    ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, ‚àÄ z ‚àà (Metric.ball c r), HasDerivAt g (f z) z :=
  ‚ü®fun z ‚Ü¶ WedgeInt c z f, fun _ hz ‚Ü¶ deriv_of_wedgeInt hf hf‚ÇÇ hz‚ü©

theorem vanishesOnRectangles_of_holomorphic {f : ‚ÑÇ ‚Üí ‚ÑÇ} {U : Set ‚ÑÇ} {z w : ‚ÑÇ}
    (hf : DifferentiableOn ‚ÑÇ f U)
    (hU : Rectangle z w ‚äÜ U) :
    RectangleIntegral f z w = 0 := by
  convert integral_boundary_rect_eq_zero_of_differentiable_on_off_countable f z w ‚àÖ (by simp)
    ((hf.mono hU).continuousOn) ?_ using 1
  intro x hx
  apply hf.differentiableAt
  rw [mem_nhds_iff]
  refine ‚ü®Ioo (min z.re w.re) (max z.re w.re) √ó‚ÑÇ Ioo (min z.im w.im) (max z.im w.im), ?_, ?_, ?_‚ü©
  ¬∑ apply subset_trans ?_ hU
    rw [Rectangle]
    apply reProdIm_subset_iff'.mpr
    left
    constructor <;> convert uIoo_subset_uIcc _ _ using 1
  ¬∑ exact IsOpen.reProdIm isOpen_Ioo isOpen_Ioo
  ¬∑ convert hx using 1; simp

theorem vanishesOnRectanglesInDisc_of_holomorphic {c : ‚ÑÇ} {r : ‚Ñù} {f : ‚ÑÇ ‚Üí ‚ÑÇ}
    (hf : DifferentiableOn ‚ÑÇ f (Metric.ball c r)) :
    VanishesOnRectanglesInDisc c r f := fun z w hz hw hz' hw' ‚Ü¶
  vanishesOnRectangles_of_holomorphic hf (Convex.rectangle (convex_ball c r) hz hw hz' hw')

-- To prove the main theorem, we first prove it on a disc
theorem hasPrimitives_of_disc (c : ‚ÑÇ) {r : ‚Ñù} : HasPrimitives (Metric.ball c r) :=
  fun _ hf ‚Ü¶ moreiras_theorem hf.continuousOn (vanishesOnRectanglesInDisc_of_holomorphic hf)

/-

calc
  f x = g x + O(h x)
  ‚àë_{n<x} Œõ n = x + O(x^(1/2+Œµ))
  f =·µ§ g upto O[l] h
  f - g =O[l] h
-/
