import Mathlib.AlgebraicTopology.FundamentalGroupoid.SimplyConnected
import Mathlib.Analysis.Calculus.Deriv.Basic
import Mathlib.Analysis.Complex.Basic
import Mathlib.Analysis.Convex.Basic
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic
import Mathlib.MeasureTheory.Integral.IntervalIntegral
import Mathlib.Analysis.Complex.CauchyIntegral

import Mathlib.Tactic.LibrarySearch

open Complex Topology

set_option autoImplicit false

-- From V. Beffara https://github.com/vbeffara/RMT4
def hasPrimitives (U : Set ‚ÑÇ) : Prop :=
  ‚àÄ f : ‚ÑÇ ‚Üí ‚ÑÇ, DifferentiableOn ‚ÑÇ f U ‚Üí ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, DifferentiableOn ‚ÑÇ g U ‚àß Set.EqOn (deriv g) f U

/-- The wedge integral from z to w of a function f -/
noncomputable def WedgeInt (z w : ‚ÑÇ) (f : ‚ÑÇ ‚Üí ‚ÑÇ) : ‚ÑÇ :=
  (‚à´ x : ‚Ñù in z.re..w.re, f (x + z.im * I)) + I ‚Ä¢ (‚à´ y : ‚Ñù in z.im..w.im, f (re w + y * I))



/-- diff of wedges -/
lemma diff_of_wedges {c : ‚ÑÇ} {r : ‚Ñù} (h0 : 0 < r) {z : ‚ÑÇ} (hz : z ‚àà Metric.ball c r)
    {f : ‚ÑÇ ‚Üí ‚ÑÇ}
    (hf : DifferentiableOn ‚ÑÇ f (Metric.ball c r)) :
    ‚àÄ·∂† h in ùìù 0,
      WedgeInt c (z+h) f - WedgeInt c z f = WedgeInt z (z+h) f := by
  simp only [Metric.mem_ball] at hz
  have : 0 < (r - dist z c) / 2 := by sorry
  filter_upwards [Metric.ball_mem_nhds 0 this]
  intro h hh
  simp only [Metric.mem_ball, dist_zero_right, norm_eq_abs] at hh
  simp only [WedgeInt] --, add_re, ofReal_add, add_im, smul_eq_mul]
  set intI := ‚à´ x : ‚Ñù in c.re..(z + h).re, f (x + c.im * I)
  set intII := I ‚Ä¢ ‚à´ y : ‚Ñù in c.im..(z + h).im, f ((z+h).re + y * I)
  set intIII := ‚à´ x : ‚Ñù in c.re..z.re, f (x + c.im * I)
  set intIV := I ‚Ä¢ ‚à´ y : ‚Ñù in c.im..z.im, f (z.re + y * I)
  set intV := ‚à´ x : ‚Ñù in z.re..(z + h).re, f (x + z.im * I)
  set intVI := I ‚Ä¢ ‚à´ y : ‚Ñù in z.im..(z + h).im, f ((z+h).re + y * I)
  let intVII := ‚à´ x : ‚Ñù in z.re..(z+h).re, f (x + c.im * I)
  let intVIII := I ‚Ä¢ ‚à´ y : ‚Ñù in c.im..z.im, f ((z+h).re + y * I)
  have intIdecomp : intI = intIII + intVII  := by
    rw [intervalIntegral.integral_add_adjacent_intervals]
    ¬∑ apply ContinuousOn.intervalIntegrable
      convert @ContinuousOn.comp ‚Ñù ‚ÑÇ ‚ÑÇ _ _ _ f (fun x => (x : ‚ÑÇ) + c.im * I) (Set.uIcc c.re z.re)
        ((fun (x : ‚Ñù) => (x : ‚ÑÇ) + c.im * I) '' (Set.uIcc c.re z.re)) ?_ ?_ ?_
      ¬∑ convert @DifferentiableOn.continuousOn ‚ÑÇ _ ‚ÑÇ _ _ ‚ÑÇ _ _ f _ _
        apply DifferentiableOn.mono hf
        sorry -- image of line is a subset of the disc
      ¬∑ apply Continuous.continuousOn
        exact Continuous.comp (continuous_add_right _) continuous_ofReal
      ¬∑ exact Set.mapsTo_image _ _
    sorry--integrable

  have intIIdecomp : intII = intVIII + intVI := by
    rw [‚Üê smul_add, intervalIntegral.integral_add_adjacent_intervals]
    sorry--integrable
    sorry--integrable

  have rectZero : intVIII = - intVII + intV + intIV := by
    rw [‚Üê sub_eq_zero]
    have : intVII - intV + intVIII - intIV = 0 := by
      convert integral_boundary_rect_eq_zero_of_differentiable_on_off_countable f (z.re + c.im * I) ((z+h).re + z.im * I) ‚àÖ ?_ ?_ ?_ using 4
      ¬∑ simp
      ¬∑ congr! 1 <;> simp
      ¬∑ congr! 1 <;> simp
      ¬∑ simp
      ¬∑ simp
      ¬∑ simp
      ¬∑ simp
      ¬∑ sorry -- ContinuousOn
      ¬∑ intro x hx
        sorry -- differentiable
    rw [‚Üê this]
    ring

  rw [intIdecomp]
  rw [intIIdecomp]
  rw [rectZero]
  ring




lemma wedgeInt_of_const (z w c : ‚ÑÇ) :
    WedgeInt z w (fun x => c) = c*(w-z) := by
  simp only [WedgeInt, intervalIntegral.integral_const, real_smul, ofReal_sub, smul_eq_mul]
  ext <;>
  simp only [add_re, mul_re, sub_re, ofReal_re, sub_im, ofReal_im, sub_self, zero_mul,
sub_zero, I_re, I_im, mul_im, add_zero, one_mul, zero_sub, add_im,
zero_add]
   <;> ring


lemma deriv_of_linint {f: ‚Ñù ‚Üí ‚ÑÇ} {a: ‚Ñù} {U : Set ‚Ñù} (hU: IsOpen U) (hUa: a‚àà U) (hf: ContinuousOn f U) :
    Asymptotics.IsLittleO (ùìù 0) (fun h ‚Ü¶ ((‚à´ x in a..a+h, f x) - h*(f a))) (fun h ‚Ü¶ h) := by
  sorry

lemma deriv_of_wedgeInt {f: ‚ÑÇ ‚Üí ‚ÑÇ} {U : Set ‚ÑÇ} {hU: IsOpen U} (hf: ContinuousOn f U)
    {z‚ÇÄ : ‚ÑÇ} (hz‚ÇÄ : z‚ÇÄ‚ààU) :
    Asymptotics.IsLittleO (ùìù 0) (fun h:‚ÑÇ ‚Ü¶ ((WedgeInt z‚ÇÄ (z‚ÇÄ+h) f) - h*(f z‚ÇÄ))) (fun h ‚Ü¶ h) := by

  simp [WedgeInt]
  -- turn littleO into bigO
  rw [Asymptotics.isLittleO_iff]
  intro c hc

  -- get ball around z‚ÇÄ
  obtain ‚ü®Œµ,hŒµ,B‚ü© := (Metric.isOpen_iff.mp hU) z‚ÇÄ hz‚ÇÄ

  -- apply fundamental theorem of calculus to horizontal part
  have continuous_h : ContinuousAt (fun x:‚Ñù => f (z‚ÇÄ.re + x + z‚ÇÄ.im*I)-f z‚ÇÄ) 0 := by
    sorry
  have integrable_h : IntervalIntegrable (fun x:‚Ñù => f (z‚ÇÄ.re +x + z‚ÇÄ.im*I)-f z‚ÇÄ) Real.measureSpace.volume 0 0 := by
    sorry
  have stronglymeasureable_h : StronglyMeasurableAtFilter (fun x:‚Ñù => f (z‚ÇÄ.re + x + z‚ÇÄ.im*I)-f z‚ÇÄ) (nhds 0) := by
    sorry

  have diff_h := intervalIntegral.integral_hasDerivAt_right integrable_h stronglymeasureable_h continuous_h
  rw [hasDerivAt_iff_isLittleO] at diff_h
  simp only [intervalIntegral.integral_same, sub_zero, re_add_im, sub_self, real_smul, ofReal_sub, mul_zero] at diff_h
  rw [Asymptotics.isLittleO_iff] at diff_h
  have : 0 < c/2 := half_pos hc
  have := diff_h this

  have horizontal : ‚àÄ·∂† (hre : ‚Ñù) in ùìù 0, ‚Äñ(‚à´ (x : ‚Ñù) in z‚ÇÄ.re..z‚ÇÄ.re + hre, f (‚Üëx + ‚Üëz‚ÇÄ.im * I)) - hre * (f z‚ÇÄ)‚Äñ ‚â§ c/2 * ‚Äñhre‚Äñ := by
    -- condition on h.re
    rw [Filter.eventually_iff] at this
    filter_upwards [Metric.ball_mem_nhds 0 hŒµ,this]
    intro hre hre_eps hre_diff

    simp only [ofReal_zero, add_zero, re_add_im, sub_self, mul_zero, sub_zero, norm_eq_abs, Real.norm_eq_abs] at hre_diff 

    -- write f as f-f(z‚ÇÄ)+f(z‚ÇÄ)
    have : ‚à´ x in z‚ÇÄ.re..z‚ÇÄ.re + hre, f (x + z‚ÇÄ.im * I) = ‚à´ x in z‚ÇÄ.re..z‚ÇÄ.re + hre, ((f (x + z‚ÇÄ.im * I)-f z‚ÇÄ) + f z‚ÇÄ) := by ring_nf
    have : ‚à´ x in z‚ÇÄ.re..z‚ÇÄ.re + hre, f (x + z‚ÇÄ.im * I) = (‚à´ x in z‚ÇÄ.re..z‚ÇÄ.re + hre, (f (x + z‚ÇÄ.im * I)-f z‚ÇÄ)) + hre*f z‚ÇÄ := by
      sorry
    rw [this]
    simp only [add_sub_cancel, norm_eq_abs, Real.norm_eq_abs, ge_iff_le]
    have : Complex.abs (‚à´ (x : ‚Ñù) in (0:‚Ñù)..hre, f (‚Üë(z‚ÇÄ.re + x) + ‚Üëz‚ÇÄ.im * I) - f z‚ÇÄ) ‚â§ c / 2 * |hre| := by
      sorry
    rw [intervalIntegral.integral_comp_add_left (fun x:‚Ñù => f (x + z‚ÇÄ.im * I) - f z‚ÇÄ) z‚ÇÄ.re] at this
    simp only [add_zero] at this
    exact this

  -- restate goal, splitting real and imaginary parts of h
  have : ‚àÄ·∂† (hre : ‚Ñù) in ùìù 0, ‚àÄ·∂†(him : ‚Ñù) in ùìù 0,
  ‚Äñ((‚à´ (x : ‚Ñù) in z‚ÇÄ.re..z‚ÇÄ.re + hre, f (‚Üëx + ‚Üëz‚ÇÄ.im * I)) +
          I * ‚à´ (y : ‚Ñù) in z‚ÇÄ.im..z‚ÇÄ.im + him, f (‚Üëz‚ÇÄ.re + ‚Üëhre + ‚Üëy * I)) -
        (hre+him*I) * f z‚ÇÄ‚Äñ ‚â§
    c * ‚Äñhre+him*I‚Äñ := by
      
    -- repeat for im
    -- condition on h.re
    rw [Filter.eventually_iff] at horizontal
    filter_upwards [Metric.ball_mem_nhds 0 hŒµ,horizontal]
    intro hre hre_eps hre_diff


    -- apply fundamental theorem of calculus to horizontal part
    have continuous_v : ContinuousAt (fun y:‚Ñù => f (z‚ÇÄ.re + hre + (z‚ÇÄ.im + y)*I)-f z‚ÇÄ) 0 := by
      sorry
    have integrable_v : IntervalIntegrable (fun y:‚Ñù => f (z‚ÇÄ.re + hre + (z‚ÇÄ.im + y)*I)-f z‚ÇÄ) Real.measureSpace.volume 0 0 := by
      sorry
    have stronglymeasureable_v : StronglyMeasurableAtFilter (fun y:‚Ñù => f (z‚ÇÄ.re + hre + (z‚ÇÄ.im+y)*I)-f z‚ÇÄ) (nhds 0) := by
      sorry

    have diff_v := intervalIntegral.integral_hasDerivAt_right integrable_v stronglymeasureable_v continuous_v
    rw [hasDerivAt_iff_isLittleO] at diff_v
    simp only [intervalIntegral.integral_same, sub_zero, re_add_im, sub_self, real_smul, ofReal_sub, mul_zero] at diff_v
    rw [Asymptotics.isLittleO_iff] at diff_v
    have : 0 < c/2 := half_pos hc
    have := diff_v this

    have vertical : ‚àÄ·∂† (him : ‚Ñù) in ùìù 0, ‚Äñ(‚à´ y in z‚ÇÄ.im..z‚ÇÄ.im + him, f (z‚ÇÄ.re + hre + y * I)) + him * f z‚ÇÄ‚Äñ ‚â§ c/2 * ‚Äñhim‚Äñ := by
      -- condition on h.im
      rw [Filter.eventually_iff] at this
      filter_upwards [Metric.ball_mem_nhds 0 hŒµ,this]
      intro him him_eps him_diff

      simp only [ofReal_zero, add_zero, norm_eq_abs, Real.norm_eq_abs] at him_diff

      -- write f as f-f(z‚ÇÄ)+f(z‚ÇÄ)
      have : ‚à´ y in z‚ÇÄ.im..z‚ÇÄ.im + him, f (z‚ÇÄ.re + hre + y * I) = ‚à´ y in z‚ÇÄ.im..z‚ÇÄ.im + him, (f (z‚ÇÄ.re + hre + y * I) -f z‚ÇÄ) + f z‚ÇÄ := by ring_nf
      have : ‚à´ y in z‚ÇÄ.im..z‚ÇÄ.im + him, f (z‚ÇÄ.re + hre + y * I) = (‚à´ y in z‚ÇÄ.im..z‚ÇÄ.im + him, f (z‚ÇÄ.re + hre + y * I) -f z‚ÇÄ) + him * f z‚ÇÄ := by
        sorry
      rw [this]

      simp only [norm_eq_abs, Real.norm_eq_abs, ge_iff_le]

      sorry

    -- condition on h.im
    rw [Filter.eventually_iff] at vertical
    filter_upwards [Metric.ball_mem_nhds 0 hŒµ,vertical]
    intro him him_eps him_diff

    sorry


--  -- write f as f-f(z‚ÇÄ)+f(z‚ÇÄ)
--  have : ‚àÄ h:‚ÑÇ, ‚à´ x in z‚ÇÄ.re..z‚ÇÄ.re + h.re, f (x + z‚ÇÄ.im * I) = ‚à´ x in z‚ÇÄ.re..z‚ÇÄ.re + h.re, ((f (x + z‚ÇÄ.im * I)-f z‚ÇÄ) + f z‚ÇÄ) := by 
--    intro h
--    ring_nf
--  have : ‚àÄ h:‚ÑÇ, ‚à´ x in z‚ÇÄ.re..z‚ÇÄ.re + h.re, f (x + z‚ÇÄ.im * I) = (‚à´ x in z‚ÇÄ.re..z‚ÇÄ.re + h.re, (f (x + z‚ÇÄ.im * I)-f z‚ÇÄ)) + h.re*f z‚ÇÄ := by
--    intro h
--    sorry
--  conv =>
--    lhs
--    intro h
--    rw [this]
--
--  -- write f as f-f(z‚ÇÄ)+f(z‚ÇÄ)
--  have : ‚àÄ h:‚ÑÇ, ‚à´ y in z‚ÇÄ.im..z‚ÇÄ.im + h.im, f (z‚ÇÄ.re + h.re + y * I) = ‚à´ y in z‚ÇÄ.im..z‚ÇÄ.im + h.im, (f (z‚ÇÄ.re + h.re + y * I) -f z‚ÇÄ) + f z‚ÇÄ := by 
--    intro h
--    ring_nf
--  have : ‚àÄ h:‚ÑÇ, ‚à´ y in z‚ÇÄ.im..z‚ÇÄ.im + h.im, f (z‚ÇÄ.re + h.re + y * I) = (‚à´ y in z‚ÇÄ.im..z‚ÇÄ.im + h.im, f (z‚ÇÄ.re + h.re + y * I) -f z‚ÇÄ) + h.im * f z‚ÇÄ := by
--    intro h
--    sorry
--  conv =>
--    lhs
--    intro h
--    rw [this]
--
--  -- why doesn't this work??
----  conv =>
----    lhs
----    intro h
----    pattern h * f z‚ÇÄ
----    rw [(Complex.re_add_im h).symm]
----  ring_nf 
--  have : ‚àÄ h : ‚ÑÇ, h*f z‚ÇÄ = (h.re+h.im*I)*f z‚ÇÄ := by
--    intro h
--    simp
--  conv =>
--    lhs
--    intro h
--    rw [this h]
--  
--  -- why doesn't ring do this on its own?!?!?!?!
--  have : ‚àÄ h:‚ÑÇ, (‚à´ (x : ‚Ñù) in z‚ÇÄ.re..z‚ÇÄ.re + h.re, f (‚Üëx + ‚Üëz‚ÇÄ.im * I) - f z‚ÇÄ) + ‚Üëh.re * f z‚ÇÄ +
--        I * ((‚à´ (y : ‚Ñù) in z‚ÇÄ.im..z‚ÇÄ.im + h.im, f (‚Üëz‚ÇÄ.re + ‚Üëh.re + ‚Üëy * I) - f z‚ÇÄ) + ‚Üëh.im * f z‚ÇÄ) -
--      (‚Üëh.re + ‚Üëh.im * I) * f z‚ÇÄ = (‚à´ (x : ‚Ñù) in z‚ÇÄ.re..z‚ÇÄ.re + h.re, f (‚Üëx + ‚Üëz‚ÇÄ.im * I) - f z‚ÇÄ) +
--        I * ((‚à´ (y : ‚Ñù) in z‚ÇÄ.im..z‚ÇÄ.im + h.im, f (‚Üëz‚ÇÄ.re + ‚Üëh.re + ‚Üëy * I) - f z‚ÇÄ)) := by 
--    intro h
--    ring
--  conv =>
--    lhs
--    intro h
--    rw [this h]
--
--  -- apply fundamental theorem of calculus to each part of the integral
--  have continuous_h : ContinuousAt (fun x:‚Ñù => f (x + z‚ÇÄ.im*I)-f z‚ÇÄ) z‚ÇÄ.re := by
--    sorry
--  have integrable_h : IntervalIntegrable (fun x:‚Ñù => f (x + z‚ÇÄ.im*I)-f z‚ÇÄ) Real.measureSpace.volume z‚ÇÄ.re z‚ÇÄ.re := by
--    sorry
--  have stronglymeasureable_h : StronglyMeasurableAtFilter (fun x:‚Ñù => f (x + z‚ÇÄ.im*I)-f z‚ÇÄ) (nhds z‚ÇÄ.re) := by
--    sorry
--
--  have diff_h := intervalIntegral.integral_hasDerivAt_right integrable_h stronglymeasureable_h continuous_h
--  rw [hasDerivAt_iff_isLittleO] at diff_h
--  simp only [intervalIntegral.integral_same, sub_zero, re_add_im, sub_self, real_smul, ofReal_sub, mul_zero] at diff_h




  -- apply fundamental theorem of calculus to each part of the integral
  have horint : Asymptotics.IsLittleO (ùìù 0) (fun h:‚ÑÇ ‚Ü¶ ‚à´ x in z‚ÇÄ.re..z‚ÇÄ.re + h.re, (f (x + z‚ÇÄ.im * I) - f z‚ÇÄ)) (fun h => h) := by
    have integrable : IntervalIntegrable (fun x:‚Ñù => f (x + z‚ÇÄ.im*I)-f z‚ÇÄ) z‚ÇÄ.re z‚ÇÄ.re+h.re
  have verint : Asymptotics.IsLittleO (ùìù 0) (fun h:‚ÑÇ ‚Ü¶ ‚à´ y in z‚ÇÄ.im..z‚ÇÄ.im + h.im, (f (z‚ÇÄ.re + h.re + y * I) - f z‚ÇÄ)) (fun h => h) := by
    sorry
  have verint' : Asymptotics.IsLittleO (ùìù 0) (fun h:‚ÑÇ ‚Ü¶ I*‚à´ y in z‚ÇÄ.im..z‚ÇÄ.im + h.im, (f (z‚ÇÄ.re + h.re + y * I) - f z‚ÇÄ)) (fun h => h) :=
    Asymptotics.IsLittleO.const_mul_left verint I

  exact Asymptotics.IsLittleO.add horint verint'

  --have : Asymptotics.IsLittleO (ùìù 0) (fun h ‚Ü¶ f (z‚ÇÄ+h) - f z‚ÇÄ) (fun h ‚Ü¶ (1:‚ÑÇ)) := by
  --  have := ContinuousOn.continuousAt hf (IsOpen.mem_nhds hU hz‚ÇÄ)
  --  have f_tendsto := ContinuousAt.tendsto this
  --  simp only [Asymptotics.isLittleO_one_iff]
  --  rw [tendsto_sub_nhds_zero_iff]

  --  -- shift the origin of the filter
  --  -- this can probably be done better
  --  let g := fun h ‚Ü¶ z‚ÇÄ+h
  --  have g_tendsto : Filter.Tendsto g (ùìù 0) (ùìù z‚ÇÄ) := by
  --    dsimp [g]
  --    rw [tendsto_sub_nhds_zero_iff.symm]
  --    simp only [add_sub_cancel']
  --    rw [Filter.tendsto_def]
  --    intros s hs
  --    simp only [Set.preimage_id']
  --    exact hs
  --  have := Filter.Tendsto.comp f_tendsto g_tendsto
  --  rw [Function.comp] at this
  --  exact this

  --dsimp [WedgeInt]







-- trivial case: empty set
theorem hasPrimitivesOfEmpty : hasPrimitives ‚àÖ := by
  dsimp [hasPrimitives]
  simp only [Set.eqOn_empty, and_true]
  dsimp [DifferentiableOn]
  dsimp [DifferentiableWithinAt]
  dsimp [HasFDerivWithinAt]
  dsimp [HasFDerivAtFilter]
  simp only [Set.mem_empty_iff_false, nhdsWithin_empty, map_sub, IsEmpty.forall_iff, forall_const, exists_const,
  forall_true_left]


-- To prove the main theorem, we first prove it on a disc
-- not sure what happens if U is empty
theorem hasPrimitivesOfConvex (U: Set ‚ÑÇ) (hU: Convex ‚Ñù U) : hasPrimitives U := by
  by_cases hne : U = ‚àÖ
  ¬∑ convert hasPrimitivesOfEmpty

  ¬∑ intros f hf_diff
    -- get z‚ÇÄ
    have : Nonempty U := Set.nonempty_iff_ne_empty'.mpr hne
    obtain ‚ü®z‚ÇÄ,hz‚ÇÄ‚ü© := Set.exists_mem_of_nonempty U
    use fun z ‚Ü¶ linint z‚ÇÄ z f
    constructor
    ¬∑ sorry

    ¬∑ intro z  hz
      have : ‚àÄ h : ‚ÑÇ, z+h‚àà U ‚Üí linint z‚ÇÄ (z+h) f - linint z‚ÇÄ z f = linint z (z+h) f:= by
        intros h hinU
        refine diffOfIntegrals U hU z‚ÇÄ (z+h) z ?_ hinU hz f hf_diff

        exact Subtype.mem z‚ÇÄ
      sorry


-- main theorem: holomorphic functions on simply connected open sets have primitives
theorem hasPrimitivesOfSimplyConnected (U : Set ‚ÑÇ) (hSc : SimplyConnectedSpace U) (hO : IsOpen U) :
    hasPrimitives U := by
  sorry


#exit
theorem contDiffStraightSeg (t‚ÇÅ t‚ÇÇ : ‚Ñù ) (ht : t‚ÇÅ < t‚ÇÇ) (z‚ÇÅ z‚ÇÇ : ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ ) : ‚àÄ·∂† i in ùìù i‚ÇÄ, ContinuousOn (F i) (Œ≥ '' Icc t‚ÇÅ t‚ÇÇ) := by
  refine straightSeg t‚ÇÅ t‚ÇÇ ht z‚ÇÅ z‚ÇÇ
  sorry
