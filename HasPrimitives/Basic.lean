import Mathlib.AlgebraicTopology.FundamentalGroupoid.SimplyConnected
import Mathlib.Analysis.Calculus.Deriv.Basic
import Mathlib.Analysis.Complex.Basic
import Mathlib.Analysis.Convex.Basic
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic
import Mathlib.MeasureTheory.Integral.IntervalIntegral

import Mathlib.Tactic.LibrarySearch

set_option autoImplicit false

-- From V. Beffara https://github.com/vbeffara/RMT4
def hasPrimitives (U : Set ‚ÑÇ) : Prop :=
  ‚àÄ f : ‚ÑÇ ‚Üí ‚ÑÇ, DifferentiableOn ‚ÑÇ f U ‚Üí ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, DifferentiableOn ‚ÑÇ g U ‚àß Set.EqOn (deriv g) f U

-- From V. Beffara https://github.com/vbeffara/RMT4
-- integral along a curve
noncomputable def curvint (t‚ÇÅ t‚ÇÇ : ‚Ñù) (f : ‚ÑÇ ‚Üí ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) : ‚ÑÇ :=
  ‚à´ t in t‚ÇÅ..t‚ÇÇ, deriv Œ≥ t ‚Ä¢ f (Œ≥ t)

-- A useful function: goes from z‚ÇÅ to z‚ÇÇ with a speed that vanishes at the endpoints
-- Having a vanishing speed at the endpoints allows paths that are differentiable by parts to be
--  parametrized in a differentiable way
noncomputable def straightSeg (t‚ÇÅ t‚ÇÇ : ‚Ñù ) (z‚ÇÅ z‚ÇÇ : ‚ÑÇ) : ‚Ñù ‚Üí ‚ÑÇ :=
  fun t => z‚ÇÅ * (1 - Real.cos (t * Real.pi / (t‚ÇÇ - t‚ÇÅ))) + z‚ÇÇ * Real.cos (t * Real.pi / (t‚ÇÇ - t‚ÇÅ))

-- straight line integral between two complex points
noncomputable def linint (z‚ÇÅ z‚ÇÇ : ‚ÑÇ) (f : ‚ÑÇ ‚Üí ‚ÑÇ) : ‚ÑÇ :=
  curvint 0 1 f (straightSeg 0 1 z‚ÇÅ z‚ÇÇ)

lemma diffOfIntegrals (U: Set ‚ÑÇ) (hU: Convex ‚Ñù U)
    (z‚ÇÄ z‚ÇÅ z‚ÇÇ : ‚ÑÇ) (hz‚ÇÄ: z‚ÇÄ ‚àà U) (hz‚ÇÅ: z‚ÇÅ ‚àà U) (hz‚ÇÇ: z‚ÇÇ ‚àà U)
    (f : ‚ÑÇ ‚Üí ‚ÑÇ)
    (hf : DifferentiableOn ‚ÑÇ f U) :
    linint z‚ÇÄ z‚ÇÅ f - linint z‚ÇÄ z‚ÇÇ f = linint z‚ÇÇ z‚ÇÅ f := by
  sorry

lemma derivOfLinint (z‚ÇÄ : ‚ÑÇ) (f: ‚ÑÇ ‚Üí ‚ÑÇ) (hf: Continuous f) (l: Filter ‚ÑÇ):
    Asymptotics.IsLittleO l (fun h ‚Ü¶ ((linint z‚ÇÄ (z‚ÇÄ+h) f) - h*(f z‚ÇÄ))) (fun h ‚Ü¶ h) := by
  sorry

-- trivial case: empty set
theorem hasPrimitivesOfEmpty : hasPrimitives ‚àÖ := by
  dsimp [hasPrimitives]
  simp only [Set.eqOn_empty, and_true]
  dsimp [DifferentiableOn]
  dsimp [DifferentiableWithinAt]
  dsimp [HasFDerivWithinAt]
  dsimp [HasFDerivAtFilter]
  simp only [Set.mem_empty_iff_false, nhdsWithin_empty, map_sub, IsEmpty.forall_iff, forall_const, exists_const,
  forall_true_left]


-- To prove the main theorem, we first prove it on a disc
-- not sure what happens if U is empty
theorem hasPrimitivesOfConvex (U: Set ‚ÑÇ) (hU: Convex ‚Ñù U) : hasPrimitives U := by
  by_cases hne : U = ‚àÖ
  ¬∑ convert hasPrimitivesOfEmpty

  ¬∑ intros f hf_diff
    -- get z‚ÇÄ
    have : Nonempty U := Set.nonempty_iff_ne_empty'.mpr hne
    obtain ‚ü®z‚ÇÄ,hz‚ÇÄ‚ü© := Set.exists_mem_of_nonempty U
    use fun z ‚Ü¶ linint z‚ÇÄ z f
    constructor
    ¬∑ sorry

    ¬∑ intro z  hz
      have : ‚àÄ h : ‚ÑÇ, z+h‚àà U ‚Üí linint z‚ÇÄ (z+h) f - linint z‚ÇÄ z f = linint z (z+h) f:= by
        intros h hinU
        refine diffOfIntegrals U hU z‚ÇÄ (z+h) z ?_ hinU hz f hf_diff

        exact Subtype.mem z‚ÇÄ
      sorry
  

-- main theorem: holomorphic functions on simply connected open sets have primitives
theorem hasPrimitivesOfSimplyConnected (U : Set ‚ÑÇ) (hSc : SimplyConnectedSpace U) (hO : IsOpen U) :
    hasPrimitives U := by
  sorry


#exit
theorem contDiffStraightSeg (t‚ÇÅ t‚ÇÇ : ‚Ñù ) (ht : t‚ÇÅ < t‚ÇÇ) (z‚ÇÅ z‚ÇÇ : ‚ÑÇ) (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ ) : ‚àÄ·∂† i in ùìù i‚ÇÄ, ContinuousOn (F i) (Œ≥ '' Icc t‚ÇÅ t‚ÇÇ) := by
  refine straightSeg t‚ÇÅ t‚ÇÇ ht z‚ÇÅ z‚ÇÇ
  sorry
