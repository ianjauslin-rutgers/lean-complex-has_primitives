import Mathlib

open Topology

theorem Asymptotics.tendsto_zero_iff_isLittleO {Œ± : Type*} {E : Type*} [NormedRing E] {f : Œ± ‚Üí E} {l : Filter Œ±} :
    (Filter.Tendsto f l (nhds 0)) ‚Üî f =o[l] (1 : Œ± ‚Üí E) := by
  sorry

theorem tendsto_sub {M : Type*} [TopologicalSpace M] [Ring M] {a : M} {b : M} :
    Filter.Tendsto (fun (p : M √ó M) => p.1 - p.2) (nhds (a, b)) (nhds (a - b)) := by
  convert Continuous.tendsto ?_ ?_
  convert Continuous.sub _ _
  sorry

theorem continuousAt_iff_isLittleO {f : ‚ÑÇ ‚Üí ‚ÑÇ} {z : ‚ÑÇ} :
    (ContinuousAt f z) ‚Üî (fun w ‚Ü¶ f w - f z) =o[ùìù z] (1 : ‚ÑÇ ‚Üí ‚ÑÇ) := by
  rw [‚Üê Asymptotics.tendsto_zero_iff_isLittleO (f := fun (w:‚ÑÇ) ‚Ü¶ f w - f z) (l := ùìù z)]
  dsimp [ContinuousAt]

#exit


lemma le_iff_sq_le {R : Type*} [LinearOrderedRing R] {x y : R} (hx : 0 ‚â§ x) (hy : 0 ‚â§ y) :
    x ‚â§ y ‚Üî x^2 ‚â§ y^2 := by
  rw [sq_le_sq, _root_.abs_of_nonneg hx, _root_.abs_of_nonneg hy]

lemma abs_le_of_mem_uIoc_zero {A : Type*} [LinearOrderedAddCommGroup A] {x y : A} (h : x ‚àà Œô 0 y) :
    |x| ‚â§ |y| := by
  rcases Set.mem_uIoc.1 h with (‚ü®hx, hxy‚ü© | ‚ü®hxy, hx‚ü©)
  ¬∑ rwa [abs_of_pos hx, abs_of_pos <| hx.trans_le hxy]
  ¬∑ rw [abs_of_nonpos hx, abs_of_neg <| hxy.trans_le hx]
    exact neg_le_neg hxy.le

lemma sq_le_of_mem_uIoc_zero {R : Type*} [LinearOrderedRing R] {x y : R} (h : x ‚àà Œô 0 y) :
    x^2 ‚â§ y^2 := sorry

example {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf0 : f =o[ùìù 0] (1 : ‚ÑÇ ‚Üí ‚ÑÇ)) :
    (fun (w : ‚ÑÇ) ‚Ü¶ ‚à´ (y : ‚Ñù) in (0:‚Ñù)..w.im, f (w.re + y * I)) =o[ùìù 0] fun w ‚Ü¶ w := by
  rw [Asymptotics.IsLittleO] at hf0 ‚ä¢
  intro c c_pos
  have := hf0 c_pos
  simp only [Asymptotics.isBigOWith_iff, Pi.one_apply, norm_one, mul_one ] at this ‚ä¢
  have : ‚àÄ·∂† (w : ‚ÑÇ) in ùìù 0, ‚àÄ y ‚àà Œô 0 w.im, ‚Äñf (w.re + y * I)‚Äñ ‚â§ c := by
    rw [Metric.nhds_basis_closedBall.eventually_iff] at this ‚ä¢
    peel this with hŒµ Œµ Œµ_pos
    intro w hw y hy
    apply hŒµ
    rw [mem_closedBall_zero_iff, le_iff_sq_le, IsROrC.norm_sq_eq_def, ‚Üê pow_two, ‚Üê pow_two] at *
    suffices w.re^2 + y ^2 ‚â§ Œµ ^ 2 by simpa
    calc _ ‚â§ w.re^2 + w.im^2 := by gcongr w.re^2 + ?_; exact sq_le_of_mem_uIoc_zero hy
         _ ‚â§ Œµ ^ 2  := by simpa using hw
    all_goals positivity
  exact this.mono fun w hw ‚Ü¶ calc
    _ ‚â§ c * |w.im - 0|  := intervalIntegral.norm_integral_le_of_norm_le_const hw
    _ ‚â§ c * ‚Äñw‚Äñ := by gcongr; simp [w.abs_im_le_abs]


#exit

open Complex

example {s s‚ÇÅ t t‚ÇÅ : Set ‚Ñù} : s √ó‚ÑÇ t ‚äÜ s‚ÇÅ √ó‚ÑÇ t‚ÇÅ ‚Üî s √óÀ¢ t ‚äÜ s‚ÇÅ √óÀ¢ t‚ÇÅ := by
  constructor
  ¬∑ intro h
    rintro ‚ü®x, y‚ü© hxy
    sorry
--    have := @mem_reProdIm
    -- have : (x : ‚ÑÇ) + y * I ‚àà s √ó‚ÑÇ t := by
    --   sorry
    -- have := h this
  ¬∑ intro h

#exit

example {x y : ‚Ñù} {s t : Set ‚Ñù} : (x : ‚ÑÇ) + y * I ‚àà s √ó‚ÑÇ t ‚Üî x ‚àà s ‚àß y ‚àà t := by
  simp [Set.mem_prod, Complex.ext_iff]

#exit

#exit
    exact h hxy


import Mathlib

open Topology

example {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : Continuous f) (hf0 : f =o[ùìù 0] (1 : ‚ÑÇ ‚Üí ‚ÑÇ)) :
    (fun (w : ‚ÑÇ) ‚Ü¶ ‚à´ (y : ‚Ñù) in (0:‚Ñù)..w.im, f (w.re + y * I)) =o[ùìù 0] fun w => w := by
  rw [Asymptotics.IsLittleO] at hf0 ‚ä¢
  intro c c_pos
  have := hf0 c_pos
  rw [Asymptotics.isBigOWith_iff] at this ‚ä¢
  simp only [Complex.norm_eq_abs, Pi.one_apply, norm_one, mul_one] at this
  filter_upwards [this]
  intro w hw
  have KeyFact : ‚àÄ y > 0, y < w.im ‚Üí Complex.abs (f (w.re + y * I)) ‚â§ c := sorry -- this is what I want!
  calc
    _ ‚â§ ‚Äñ‚à´ (y : ‚Ñù) in (0 : ‚Ñù)..w.im, c‚Äñ := ?_
    _ ‚â§ c * ‚Äñw‚Äñ := ?_
  ¬∑ sorry
  ¬∑ simp only [intervalIntegral.integral_const, sub_zero, smul_eq_mul, norm_mul, Real.norm_eq_abs,
    Complex.norm_eq_abs]
    sorry

#exit

example {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : Continuous f) {z : ‚ÑÇ} :
  (fun (w : ‚ÑÇ) => (‚à´ (y : ‚Ñù) in z.im..w.im, f (w.re + y * I))
    - ‚à´ (y : ‚Ñù) in z.im..w.im, f (z.re + y * I))
    =o[ùìù z] fun w => w - z := by
  calc
    _ = fun (w : ‚ÑÇ) => (‚à´ (y : ‚Ñù) in z.im..w.im, f (w.re + y * I) - f (z.re + y * I)) := ?_
    _ =o[ùìù z] fun w => w - z := ?_

  sorry

#exit

example (f g h : ‚Ñù ‚Üí ‚Ñù) : f - h = (f - g) + (g - h) := by
  exact (sub_add_sub_cancel f g h).symm

#exit


example {w z : ‚ÑÇ}
(hRe : |w.re| < |z.re|)
(hIm : w.im = z.im) :
Complex.abs w < Complex.abs z := by
  exact?

#exit

example {f g h : ‚Ñù ‚Üí ‚Ñù} {x : ‚Ñù} (hfg : f =o[ùìù x] g) (hgh : g =O[ùìù x] h) :
  f =o[ùìù x] h := by
  exact Asymptotics.IsLittleO.trans_isBigO hfg hgh

example {f g h : ‚Ñù ‚Üí ‚Ñù} {x : ‚Ñù} (hfg : f =o[ùìù x] g) (hgh : g =O[ùìù x] h) :
  f =o[ùìù x] h := by
  calc
    f =o[ùìù x] g := hfg
    _ =O[ùìù x] h := hgh



example {z : ‚ÑÇ} {f : ‚Ñù ‚Üí ‚ÑÇ} (h : (fun x ‚Ü¶ f (x - z.re)) =o[ùìù z.re] (fun x ‚Ü¶ x - z.re)) :
  (fun w ‚Ü¶ f (w.re - z.re)) =o[ùìù z] (fun w ‚Ü¶ w - z) := by
  have zReTendsTo : Filter.Tendsto (fun (w : ‚ÑÇ) ‚Ü¶ w.re) (ùìù z) (ùìù z.re) :=
    by apply Continuous.tendsto Complex.continuous_re
  have LittleO_comp := h.comp_tendsto zReTendsTo
  refine LittleO_comp.trans_isBigO ?_
  extract_goal
  rw [Asymptotics.isBigO_iff]
  use 1
  filter_upwards
  intro w
  simp
  rw [‚Üê Complex.sub_re ]
  exact Complex.abs_re_le_abs (w - z)


/-
Note: Try to set up a trans instance for `theorem Asymptotics.IsLittleO.trans_isBigO` (should be tagged an instance of trans) (Ask on zulip, where someone can do it faster... )
-/
  #exit
  calc
    _ =o[ùìù z] (fun w => w.re - z.re) := LittleO_comp
    _ =O[ùìù z] _ := ?_
  rw [Asymptotics.isLittleO_iff]
  intro c c_pos
  let c‚ÇÅ := c / 100
  have c‚ÇÅ_pos : 0 < c‚ÇÅ := div_pos c_pos (by norm_num)
  filter_upwards [Metric.ball_mem_nhds z c‚ÇÅ_pos]
  intro w w_in_ball


#exit

  ((fun x => f (x - z.re)) ‚àò fun w => w.re) =o[ùìù z] ((fun x => x - z.re) ‚àò fun w => w.re)
‚ä¢
  sorry

#exit
  have : fun w ‚Ü¶ w.re - z.re =o[ùìù z.re] fun w ‚Ü¶ w - z := by
    have : fun w ‚Ü¶ w.re - z.re = fun w ‚Ü¶ w - z := by
      ext
      simp
    rw [this]
    exact h
  have : fun w ‚Ü¶ w - z = fun w ‚Ü¶ w.re - z.re := by
    ext
    simp
  rw [this]
  exact this


#exit
(fun x' =>
    ((‚à´ (x : ‚Ñù) in z.re..x', f (‚Üëx + ‚Üëz.im * I)) - ‚à´ (x : ‚Ñù) in z.re..z.re, f (‚Üëx + ‚Üëz.im * I)) -
      (ContinuousLinearMap.smulRight 1 (f (‚Üëz.re + ‚Üëz.im * I))) (x' - z.re)) =o[ùìù z.re]
  fun x' => x' - z.re
‚ä¢ (fun w => (‚à´ (x : ‚Ñù) in z.re..w.re, f (‚Üëx + ‚Üëz.im * I)) - ‚Üë(w - z).re * f z) =o[ùìù z] fun w => w - z


example {f g h i : ‚Ñù ‚Üí ‚Ñù} {x : ‚Ñù} (hfg : ‚àÄ·∂† (y : ‚Ñù) in ùìù x, f y = g y) (hgh : (g + i) =o[ùìù x] h) :
  (f + i) =o[ùìù x] h := by
  sorry
#exit
  have := @Filter.eventually_of_forall (hp := fun (x : ‚Ñù) (hx : f x = g x) ‚Ü¶ hx.symm)
  have := @Filter.Eventually.mp
  have := @Asymptotics.IsLittleO.congr'
  have := hgh.congr' (hfg.mp (eventually_of_forall (fun (x:‚Ñù) (hx : f x = g x) ‚Ü¶ hx.symm))) (by rfl)



#exit

example (f : ‚Ñù ‚Üí ‚Ñù) (x : ‚Ñù) (h : ContinuousAt f x) :
  (fun y ‚Ü¶ (‚à´ t in x..y, f t) - (y - x) * f x) =o[ùìù x] (fun y ‚Ü¶ y - x) := by
  sorry

example (f : ‚Ñù ‚Üí ‚Ñù) (x : ‚Ñù) (h : ContinuousAt f x) :
  (fun y ‚Ü¶ (‚à´ t in x..y, f (t+(y-x))) - (y - x) * f x) =o[ùìù x] (fun y ‚Ü¶ y - x) := by
  sorry

import Mathlib

open Topology

example {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : Continuous f) (hf0 : f =o[ùìù 0] (1 : ‚ÑÇ ‚Üí ‚ÑÇ)) :
    (fun (w : ‚ÑÇ) ‚Ü¶ ‚à´ (y : ‚Ñù) in (0:‚Ñù)..w.im, f (w.re + y * I)) =o[ùìù 0] fun w => w := by
  rw [Asymptotics.IsLittleO] at hf0 ‚ä¢
  intro c c_pos
  have := hf0 c_pos
  rw [Asymptotics.isBigOWith_iff] at this ‚ä¢
  simp only [Complex.norm_eq_abs, Pi.one_apply, norm_one, mul_one] at this
  filter_upwards [this]
  intro w hw
  have KeyFact : ‚àÄ y > 0, y < w.im ‚Üí Complex.abs (f (w.re + y * I)) ‚â§ c := sorry -- this is what I want!
  calc
    _ ‚â§ ‚Äñ‚à´ (y : ‚Ñù) in (0 : ‚Ñù)..w.im, c‚Äñ := ?_
    _ ‚â§ c * ‚Äñw‚Äñ := ?_
  ¬∑ sorry
  ¬∑ simp only [intervalIntegral.integral_const, sub_zero, smul_eq_mul, norm_mul, Real.norm_eq_abs,
    Complex.norm_eq_abs]
    sorry

#exit

example {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : Continuous f) {z : ‚ÑÇ} :
  (fun (w : ‚ÑÇ) => (‚à´ (y : ‚Ñù) in z.im..w.im, f (w.re + y * I))
    - ‚à´ (y : ‚Ñù) in z.im..w.im, f (z.re + y * I))
    =o[ùìù z] fun w => w - z := by
  calc
    _ = fun (w : ‚ÑÇ) => (‚à´ (y : ‚Ñù) in z.im..w.im, f (w.re + y * I) - f (z.re + y * I)) := ?_
    _ =o[ùìù z] fun w => w - z := ?_

  sorry

#exit

example (f g h : ‚Ñù ‚Üí ‚Ñù) : f - h = (f - g) + (g - h) := by
  exact (sub_add_sub_cancel f g h).symm

#exit


example {w z : ‚ÑÇ}
(hRe : |w.re| < |z.re|)
(hIm : w.im = z.im) :
Complex.abs w < Complex.abs z := by
  exact?

#exit

example {f g h : ‚Ñù ‚Üí ‚Ñù} {x : ‚Ñù} (hfg : f =o[ùìù x] g) (hgh : g =O[ùìù x] h) :
  f =o[ùìù x] h := by
  exact Asymptotics.IsLittleO.trans_isBigO hfg hgh

example {f g h : ‚Ñù ‚Üí ‚Ñù} {x : ‚Ñù} (hfg : f =o[ùìù x] g) (hgh : g =O[ùìù x] h) :
  f =o[ùìù x] h := by
  calc
    f =o[ùìù x] g := hfg
    _ =O[ùìù x] h := hgh



example {z : ‚ÑÇ} {f : ‚Ñù ‚Üí ‚ÑÇ} (h : (fun x ‚Ü¶ f (x - z.re)) =o[ùìù z.re] (fun x ‚Ü¶ x - z.re)) :
  (fun w ‚Ü¶ f (w.re - z.re)) =o[ùìù z] (fun w ‚Ü¶ w - z) := by
  have zReTendsTo : Filter.Tendsto (fun (w : ‚ÑÇ) ‚Ü¶ w.re) (ùìù z) (ùìù z.re) :=
    by apply Continuous.tendsto Complex.continuous_re
  have LittleO_comp := h.comp_tendsto zReTendsTo
  refine LittleO_comp.trans_isBigO ?_
  extract_goal
  rw [Asymptotics.isBigO_iff]
  use 1
  filter_upwards
  intro w
  simp
  rw [‚Üê Complex.sub_re ]
  exact Complex.abs_re_le_abs (w - z)


/-
Note: Try to set up a trans instance for `theorem Asymptotics.IsLittleO.trans_isBigO` (should be tagged an instance of trans) (Ask on zulip, where someone can do it faster... )
-/
  #exit
  calc
    _ =o[ùìù z] (fun w => w.re - z.re) := LittleO_comp
    _ =O[ùìù z] _ := ?_
  rw [Asymptotics.isLittleO_iff]
  intro c c_pos
  let c‚ÇÅ := c / 100
  have c‚ÇÅ_pos : 0 < c‚ÇÅ := div_pos c_pos (by norm_num)
  filter_upwards [Metric.ball_mem_nhds z c‚ÇÅ_pos]
  intro w w_in_ball


#exit

  ((fun x => f (x - z.re)) ‚àò fun w => w.re) =o[ùìù z] ((fun x => x - z.re) ‚àò fun w => w.re)
‚ä¢
  sorry

#exit
  have : fun w ‚Ü¶ w.re - z.re =o[ùìù z.re] fun w ‚Ü¶ w - z := by
    have : fun w ‚Ü¶ w.re - z.re = fun w ‚Ü¶ w - z := by
      ext
      simp
    rw [this]
    exact h
  have : fun w ‚Ü¶ w - z = fun w ‚Ü¶ w.re - z.re := by
    ext
    simp
  rw [this]
  exact this


#exit
(fun x' =>
    ((‚à´ (x : ‚Ñù) in z.re..x', f (‚Üëx + ‚Üëz.im * I)) - ‚à´ (x : ‚Ñù) in z.re..z.re, f (‚Üëx + ‚Üëz.im * I)) -
      (ContinuousLinearMap.smulRight 1 (f (‚Üëz.re + ‚Üëz.im * I))) (x' - z.re)) =o[ùìù z.re]
  fun x' => x' - z.re
‚ä¢ (fun w => (‚à´ (x : ‚Ñù) in z.re..w.re, f (‚Üëx + ‚Üëz.im * I)) - ‚Üë(w - z).re * f z) =o[ùìù z] fun w => w - z


example {f g h i : ‚Ñù ‚Üí ‚Ñù} {x : ‚Ñù} (hfg : ‚àÄ·∂† (y : ‚Ñù) in ùìù x, f y = g y) (hgh : (g + i) =o[ùìù x] h) :
  (f + i) =o[ùìù x] h := by
  sorry
#exit
  have := @Filter.eventually_of_forall (hp := fun (x : ‚Ñù) (hx : f x = g x) ‚Ü¶ hx.symm)
  have := @Filter.Eventually.mp
  have := @Asymptotics.IsLittleO.congr'
  have := hgh.congr' (hfg.mp (eventually_of_forall (fun (x:‚Ñù) (hx : f x = g x) ‚Ü¶ hx.symm))) (by rfl)



#exit

example (f : ‚Ñù ‚Üí ‚Ñù) (x : ‚Ñù) (h : ContinuousAt f x) :
  (fun y ‚Ü¶ (‚à´ t in x..y, f t) - (y - x) * f x) =o[ùìù x] (fun y ‚Ü¶ y - x) := by
  sorry

example (f : ‚Ñù ‚Üí ‚Ñù) (x : ‚Ñù) (h : ContinuousAt f x) :
  (fun y ‚Ü¶ (‚à´ t in x..y, f (t+(y-x))) - (y - x) * f x) =o[ùìù x] (fun y ‚Ü¶ y - x) := by
  sorry
